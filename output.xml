<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/nanjizal/haxe/versions/779b005/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/nanjizal/haxe/versions/779b005/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/nanjizal/haxe/versions/779b005/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta><m n=":native"><e>"Date"</e></m></meta>
	</class>
	<class path="Math" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/Math.hx" extern="1">
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="String" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<abstract path="haxe.CallStack" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<new public="1" get="inline" set="null" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/nanjizal/haxe/versions/779b005/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.extern.Rest" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Boot" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="65" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="77" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="108" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="118" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="130" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.lib.Error" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Object" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<t path="haxe.extern.Rest"><a/></t>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="all.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><c path="all.T"/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
			<overloads><all public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><d/></c></c>
	</f>
	<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
</all></overloads>
		</all>
		<allSettled public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="allSettled.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><c path="allSettled.T"/></t></c></c>
			</f>
			<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
			<overloads><allSettled public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><d/></t></c></c>
	</f>
	<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
</allSettled></overloads>
		</allSettled>
		<race public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="race.T"/></c></c>
				<c path="js.lib.Promise"><c path="race.T"/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
			<overloads><race public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
</race></overloads>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<typedef path="js.lib.PromiseSettleOutcome" params="T" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" module="js.lib.Promise"><a>
	<value>
		<x path="Null"><c path="js.lib.PromiseSettleOutcome.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<status><x path="js.lib.PromiseSettleStatus"/></status>
	<reason>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</reason>
</a></typedef>
	<abstract path="js.lib.PromiseSettleStatus" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" module="js.lib.Promise">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib._Promise.PromiseSettleStatus_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/home/nanjizal/haxe/versions/779b005/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="67">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="xGLfonts.Main_Doc" params="" file="src/xGLfonts/Main_Doc.hx">
		<main public="1" set="method" line="10" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="xGLfonts._TestString.TestString_Fields_" params="" file="src/xGLfonts/TestString.hx" private="1" module="xGLfonts.TestString" final="1">
		<testString public="1" expr="&quot;\nTo be, or not to be--that is the question:\nWhether &apos;tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune\nOr to take arms against a sea of troubles\nAnd by opposing end them. To die, to sleep--\nNo more--and by a sleep to say we end\nThe heartache, and the thousand natural shocks\nThat flesh is heir to. &apos;Tis a consummation\nDevoutly to be wished. To die, to sleep--\nTo sleep--perchance to dream: ay, there&apos;s the rub,\nFor in that sleep of death what dreams may come\nWhen we have shuffled off this mortal coil,\nMust give us pause. There&apos;s the respect\nThat makes calamity of so long life.\n&quot;" line="4" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"\nTo be, or not to be--that is the question:\nWhether 'tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune\nOr to take arms against a sea of troubles\nAnd by opposing end them. To die, to sleep--\nNo more--and by a sleep to say we end\nThe heartache, and the thousand natural shocks\nThat flesh is heir to. 'Tis a consummation\nDevoutly to be wished. To die, to sleep--\nTo sleep--perchance to dream: ay, there's the rub,\nFor in that sleep of death what dreams may come\nWhen we have shuffled off this mortal coil,\nMust give us pause. There's the respect\nThat makes calamity of so long life.\n"</e></m></meta>
		</testString>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="xGLfonts.TextShader" params="" file="src/xGLfonts/TextShader.hx">
		<testString public="1" get="accessor" set="null" static="1"><c path="String"/></testString>
		<get_testString get="inline" set="null" line="107" static="1"><f a=""><c path="String"/></f></get_testString>
		<fragment public="1" get="accessor" set="null" static="1"><c path="String"/></fragment>
		<get_fragment get="inline" set="null" line="112" static="1"><f a=""><c path="String"/></f></get_fragment>
		<vertex public="1" get="accessor" set="null" static="1"><c path="String"/></vertex>
		<get_vertex get="inline" set="null" line="117" static="1"><f a=""><c path="String"/></f></get_vertex>
		<new public="1" set="method" line="120"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xGLfonts._TextShader.TextShader_Fields_" params="" file="src/xGLfonts/TextShader.hx" private="1" module="xGLfonts.TextShader" final="1">
		<textVertexShader final="1" public="1" get="inline" set="null" expr="&quot;\nattribute vec2  pos;        // Vertex position\nattribute vec2  tex0;       // Tex coord\n//attribute float sdf_size;   // Signed distance field size in screen pixels\nattribute float scale;\n\nuniform vec2  sdf_tex_size; // Size of font texture in pixels\nuniform mat3  transform;\nuniform float sdf_border_size;\n\nvarying vec2  tc0;\nvarying float doffset;\nvarying vec2  sdf_texel;\nvarying float subpixel_offset;\n\nvoid main(void) {\n    float sdf_size = 2.0 * scale * sdf_border_size;\n    tc0 = tex0;\n    doffset = 1.0 / sdf_size;         // Distance field delta in screen pixels\n    sdf_texel = 1.0 / sdf_tex_size;\n    subpixel_offset = 0.3333 / scale; // 1/3 of screen pixel to texels\n\n    vec3 screen_pos = transform * vec3( pos, 1.0 );    \n    gl_Position = vec4( screen_pos.xy, 0.0, 1.0 );\n}\n&quot;" line="5" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"\nattribute vec2  pos;        // Vertex position\nattribute vec2  tex0;       // Tex coord\n//attribute float sdf_size;   // Signed distance field size in screen pixels\nattribute float scale;\n\nuniform vec2  sdf_tex_size; // Size of font texture in pixels\nuniform mat3  transform;\nuniform float sdf_border_size;\n\nvarying vec2  tc0;\nvarying float doffset;\nvarying vec2  sdf_texel;\nvarying float subpixel_offset;\n\nvoid main(void) {\n    float sdf_size = 2.0 * scale * sdf_border_size;\n    tc0 = tex0;\n    doffset = 1.0 / sdf_size;         // Distance field delta in screen pixels\n    sdf_texel = 1.0 / sdf_tex_size;\n    subpixel_offset = 0.3333 / scale; // 1/3 of screen pixel to texels\n\n    vec3 screen_pos = transform * vec3( pos, 1.0 );    \n    gl_Position = vec4( screen_pos.xy, 0.0, 1.0 );\n}\n"</e></m></meta>
		</textVertexShader>
		<textFragmentShader final="1" public="1" get="inline" set="null" expr="&quot;\nprecision mediump float;\n\nuniform sampler2D font_tex;\nuniform float hint_amount;\nuniform float subpixel_amount;\nuniform vec4  font_color;\n\nvarying vec2  tc0;\nvarying float doffset;\nvarying vec2  sdf_texel;\nvarying float subpixel_offset;\n\n\nvec3 sdf_triplet_alpha( vec3 sdf, float horz_scale, float vert_scale, float vgrad ) {\n    float hdoffset = mix( doffset * horz_scale, doffset * vert_scale, vgrad );\n    float rdoffset = mix( doffset, hdoffset, hint_amount );\n    vec3 alpha = smoothstep( vec3( 0.5 - rdoffset ), vec3( 0.5 + rdoffset ), sdf );\n    alpha = pow( alpha, vec3( 1.0 + 0.2 * vgrad * hint_amount ) );\n    return alpha;\n}\n\nfloat sdf_alpha( float sdf, float horz_scale, float vert_scale, float vgrad ) {\n    float hdoffset = mix( doffset * horz_scale, doffset * vert_scale, vgrad );\n    float rdoffset = mix( doffset, hdoffset, hint_amount );\n    float alpha = smoothstep( 0.5 - rdoffset, 0.5 + rdoffset, sdf );\n    alpha = pow( alpha, 1.0 + 0.2 * vgrad * hint_amount );\n    return alpha;\n}\n\nvoid main() {\n    // Sampling the texture, L pattern\n    float sdf       = texture2D( font_tex, tc0 ).r;\n    float sdf_north = texture2D( font_tex, tc0 + vec2( 0.0, sdf_texel.y ) ).r;\n    float sdf_east  = texture2D( font_tex, tc0 + vec2( sdf_texel.x, 0.0 ) ).r;\n\n    // Estimating stroke direction by the distance field gradient vector\n    vec2  sgrad     = vec2( sdf_east - sdf, sdf_north - sdf );\n    float sgrad_len = max( length( sgrad ), 1.0 / 128.0 );\n    vec2  grad      = sgrad / vec2( sgrad_len );\n    float vgrad = abs( grad.y ); // 0.0 - vertical stroke, 1.0 - horizontal one\n\n    if ( subpixel_amount &gt; 0.0 ) {\n        // Subpixel SDF samples\n        vec2  subpixel = vec2( subpixel_offset, 0.0 );\n    \n        // For displays with vertical subpixel placement:\n        // vec2 subpixel = vec2( 0.0, subpixel_offset );\n    \n        float sdf_sp_n  = texture2D( font_tex, tc0 - subpixel ).r;\n        float sdf_sp_p  = texture2D( font_tex, tc0 + subpixel ).r;\n\n        float horz_scale  = 0.5; // Should be 0.33333, a subpixel size, but that is too colorful\n        float vert_scale  = 0.6;\n\n        vec3 triplet_alpha = sdf_triplet_alpha( vec3( sdf_sp_n, sdf, sdf_sp_p ), horz_scale, vert_scale, vgrad );\n    \n        // For BGR subpixels:\n        // triplet_alpha = triplet.bgr\n\n        gl_FragColor = vec4( triplet_alpha, 1.0 );\n\n    } else {\n        float horz_scale  = 1.1;\n        float vert_scale  = 0.6;\n        \n        float alpha = sdf_alpha( sdf, 1.1, 0.6, vgrad );\n        gl_FragColor = vec4( font_color.rgb, font_color.a * alpha );\n    }\n}\n&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e><![CDATA["\nprecision mediump float;\n\nuniform sampler2D font_tex;\nuniform float hint_amount;\nuniform float subpixel_amount;\nuniform vec4  font_color;\n\nvarying vec2  tc0;\nvarying float doffset;\nvarying vec2  sdf_texel;\nvarying float subpixel_offset;\n\n\nvec3 sdf_triplet_alpha( vec3 sdf, float horz_scale, float vert_scale, float vgrad ) {\n    float hdoffset = mix( doffset * horz_scale, doffset * vert_scale, vgrad );\n    float rdoffset = mix( doffset, hdoffset, hint_amount );\n    vec3 alpha = smoothstep( vec3( 0.5 - rdoffset ), vec3( 0.5 + rdoffset ), sdf );\n    alpha = pow( alpha, vec3( 1.0 + 0.2 * vgrad * hint_amount ) );\n    return alpha;\n}\n\nfloat sdf_alpha( float sdf, float horz_scale, float vert_scale, float vgrad ) {\n    float hdoffset = mix( doffset * horz_scale, doffset * vert_scale, vgrad );\n    float rdoffset = mix( doffset, hdoffset, hint_amount );\n    float alpha = smoothstep( 0.5 - rdoffset, 0.5 + rdoffset, sdf );\n    alpha = pow( alpha, 1.0 + 0.2 * vgrad * hint_amount );\n    return alpha;\n}\n\nvoid main() {\n    // Sampling the texture, L pattern\n    float sdf       = texture2D( font_tex, tc0 ).r;\n    float sdf_north = texture2D( font_tex, tc0 + vec2( 0.0, sdf_texel.y ) ).r;\n    float sdf_east  = texture2D( font_tex, tc0 + vec2( sdf_texel.x, 0.0 ) ).r;\n\n    // Estimating stroke direction by the distance field gradient vector\n    vec2  sgrad     = vec2( sdf_east - sdf, sdf_north - sdf );\n    float sgrad_len = max( length( sgrad ), 1.0 / 128.0 );\n    vec2  grad      = sgrad / vec2( sgrad_len );\n    float vgrad = abs( grad.y ); // 0.0 - vertical stroke, 1.0 - horizontal one\n\n    if ( subpixel_amount > 0.0 ) {\n        // Subpixel SDF samples\n        vec2  subpixel = vec2( subpixel_offset, 0.0 );\n    \n        // For displays with vertical subpixel placement:\n        // vec2 subpixel = vec2( 0.0, subpixel_offset );\n    \n        float sdf_sp_n  = texture2D( font_tex, tc0 - subpixel ).r;\n        float sdf_sp_p  = texture2D( font_tex, tc0 + subpixel ).r;\n\n        float horz_scale  = 0.5; // Should be 0.33333, a subpixel size, but that is too colorful\n        float vert_scale  = 0.6;\n\n        vec3 triplet_alpha = sdf_triplet_alpha( vec3( sdf_sp_n, sdf, sdf_sp_p ), horz_scale, vert_scale, vgrad );\n    \n        // For BGR subpixels:\n        // triplet_alpha = triplet.bgr\n\n        gl_FragColor = vec4( triplet_alpha, 1.0 );\n\n    } else {\n        float horz_scale  = 1.1;\n        float vert_scale  = 0.6;\n        \n        float alpha = sdf_alpha( sdf, 1.1, 0.6, vgrad );\n        gl_FragColor = vec4( font_color.rgb, font_color.a * alpha );\n    }\n}\n"]]></e></m></meta>
		</textFragmentShader>
	</class>
	<class path="xGLfonts.TextUtils" params="" file="src/xGLfonts/TextUtils.hx">
		<fontMetrics public="1" set="method" line="145" static="1">
			<f a="font:pixelSize:?moreLineGap" v="::0.0">
				<c path="xGLfonts.structs.FontData"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="xGLfonts.structs.FontMetric"/>
			</f>
			<meta><m n=":value"><e>{ moreLineGap : 0.0 }</e></m></meta>
		</fontMetrics>
		<charRect public="1" set="method" line="153" static="1">
			<f a="pos:font:fontMetrics:fontChar:?kern" v="::::0.0">
				<c path="Array"><x path="Float"/></c>
				<c path="xGLfonts.structs.FontData"/>
				<c path="xGLfonts.structs.FontMetric"/>
				<c path="xGLfonts.structs.CharData"/>
				<x path="Float"/>
				<c path="xGLfonts.structs.CharCoordinates"/>
			</f>
			<meta><m n=":value"><e>{ kern : 0.0 }</e></m></meta>
		</charRect>
		<writeString public="1" set="method" line="163" static="1">
			<f a="str:font:fontMetrics:pos:vertexArray:?strPos:?arrayPos" v=":::::0:0">
				<c path="String"/>
				<c path="xGLfonts.structs.FontData"/>
				<c path="xGLfonts.structs.FontMetric"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="xGLfonts.structs.WriteStrResult"/>
			</f>
			<meta><m n=":value"><e>{ arrayPos : 0, strPos : 0 }</e></m></meta>
		</writeString>
		<new public="1" set="method" line="141"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xGLfonts._TextUtils.TextUtils_Fields_" params="" file="src/xGLfonts/TextUtils.hx" private="1" module="xGLfonts.TextUtils" final="1">
		<fontMetrics public="1" set="method" line="10" static="1">
			<f a="font:pixelSize:?moreLineGap" v="::0.0">
				<c path="xGLfonts.structs.FontData"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="xGLfonts.structs.FontMetric"/>
			</f>
			<meta><m n=":value"><e>{ moreLineGap : 0.0 }</e></m></meta>
		</fontMetrics>
		<charRect public="1" set="method" line="38" static="1">
			<f a="pos:font:fontMetrics:fontChar:?kern" v="::::0.0">
				<c path="Array"><x path="Float"/></c>
				<c path="xGLfonts.structs.FontData"/>
				<c path="xGLfonts.structs.FontMetric"/>
				<c path="xGLfonts.structs.CharData"/>
				<x path="Float"/>
				<c path="xGLfonts.structs.CharCoordinates"/>
			</f>
			<meta><m n=":value"><e>{ kern : 0.0 }</e></m></meta>
		</charRect>
		<writeString public="1" set="method" line="80" static="1">
			<f a="str:font:fontMetrics:pos:vertexArray:?strPos:?arrayPos" v=":::::0:0">
				<c path="String"/>
				<c path="xGLfonts.structs.FontData"/>
				<c path="xGLfonts.structs.FontMetric"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="xGLfonts.structs.WriteStrResult"/>
			</f>
			<meta><m n=":value"><e>{ arrayPos : 0, strPos : 0 }</e></m></meta>
		</writeString>
	</class>
	<class path="xGLfonts.fontInfo.UbuntuInfo" params="" file="src/xGLfonts/fontInfo/UbuntuInfo.hx">
		<fontData public="1" get="accessor" set="null" static="1"><c path="xGLfonts.structs.FontData"/></fontData>
		<get_fontData get="inline" set="null" line="6" static="1"><f a=""><c path="xGLfonts.structs.FontData"/></f></get_fontData>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xGLfonts.structs.CharData" params="" file="src/xGLfonts/structs/CharData.hx">
		<codePoint public="1"><x path="Int"/></codePoint>
		<rect public="1"><c path="Array"><x path="Float"/></c></rect>
		<bearingX public="1"><x path="Float"/></bearingX>
		<bearingY public="1"><x path="Float"/></bearingY>
		<advanceX public="1"><x path="Float"/></advanceX>
		<flags public="1"><x path="Int"/></flags>
		<new public="1" set="method" line="30"><f a="codePoint:rect:bearingX:bearingY:advanceX:flags">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="xGLfonts.structs.FontData" params="" file="src/xGLfonts/structs/FontData.hx">
		<ix public="1"><x path="Float"/></ix>
		<iy public="1"><x path="Float"/></iy>
		<aspect public="1"><x path="Float"/></aspect>
		<rowHeight public="1"><x path="Float"/></rowHeight>
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<lineGap public="1"><x path="Float"/></lineGap>
		<capHeight public="1"><x path="Float"/></capHeight>
		<xHeight public="1"><x path="Float"/></xHeight>
		<spaceAdvance public="1"><x path="Float"/></spaceAdvance>
		<chars public="1"><c path="haxe.ds.StringMap"><c path="xGLfonts.structs.CharData"/></c></chars>
		<kern public="1"><c path="haxe.ds.StringMap"><x path="Float"/></c></kern>
		<new public="1" set="method" line="32"><f a="ix:iy:aspect:rowHeight:ascent:descent:lineGap:capHeight:xHeight:spaceAdvance:chars:kern">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="haxe.ds.StringMap"><c path="xGLfonts.structs.CharData"/></c>
	<c path="haxe.ds.StringMap"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="xGLfonts.fontInfo._UbuntuInfo.UbuntuInfo_Fields_" params="" file="src/xGLfonts/fontInfo/UbuntuInfo.hx" private="1" module="xGLfonts.fontInfo.UbuntuInfo" final="1">
		<ubuntuData public="1" expr="{ ix : 0.009766, iy : 0.009766, aspect : 1.000000, rowHeight : 0.121094, ascent : 0.083984, descent : 0.017578, lineGap : 0.002537, capHeight : 0.062786, xHeight : 0.048112, spaceAdvance : 0.020929, chars : [&quot;!&quot; =&gt; { codePoint : 33, rect : [0.000000, 0.000000, 0.031494, 0.121094], bearingX : 0.006433, bearingY : 0.006433, advanceX : 0.025006, flags : 8 }, &quot;\&quot;&quot; =&gt; { codePoint : 34, rect : [0.031494, 0.000000, 0.075684, 0.121094], bearingX : 0.006523, bearingY : 0.006523, advanceX : 0.037871, flags : 8 }, &quot;#&quot; =&gt; { codePoint : 35, rect : [0.075684, 0.000000, 0.146729, 0.121094], bearingX : 0.004439, bearingY : 0.004439, advanceX : 0.060430, flags : 8 }, &quot;$&quot; =&gt; { codePoint : 36, rect : [0.146729, 0.000000, 0.205811, 0.121094], bearingX : 0.005527, bearingY : 0.005527, advanceX : 0.051098, flags : 8 }, &quot;%&quot; =&gt; { codePoint : 37, rect : [0.205811, 0.000000, 0.293945, 0.121094], bearingX : 0.004530, bearingY : 0.004530, advanceX : 0.077735, flags : 8 }, &quot;&amp;&quot; =&gt; { codePoint : 38, rect : [0.293945, 0.000000, 0.368408, 0.121094], bearingX : 0.004168, bearingY : 0.004168, advanceX : 0.060340, flags : 8 }, &quot;&apos;&quot; =&gt; { codePoint : 39, rect : [0.368408, 0.000000, 0.396484, 0.121094], bearingX : 0.006523, bearingY : 0.006523, advanceX : 0.021835, flags : 8 }, &quot;(&quot; =&gt; { codePoint : 40, rect : [0.396484, 0.000000, 0.437500, 0.121094], bearingX : 0.007067, bearingY : 0.007067, advanceX : 0.029354, flags : 8 }, &quot;)&quot; =&gt; { codePoint : 41, rect : [0.437500, 0.000000, 0.478516, 0.121094], bearingX : 0.000634, bearingY : 0.000634, advanceX : 0.029354, flags : 8 }, &quot;*&quot; =&gt; { codePoint : 42, rect : [0.478516, 0.000000, 0.534668, 0.121094], bearingX : 0.003352, bearingY : 0.003352, advanceX : 0.043488, flags : 8 }, &quot;+&quot; =&gt; { codePoint : 43, rect : [0.534668, 0.000000, 0.595459, 0.121094], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, &quot;,&quot; =&gt; { codePoint : 44, rect : [0.595459, 0.000000, 0.627686, 0.121094], bearingX : 0.003443, bearingY : 0.003443, advanceX : 0.022288, flags : 8 }, &quot;-&quot; =&gt; { codePoint : 45, rect : [0.627686, 0.000000, 0.669434, 0.121094], bearingX : 0.002356, bearingY : 0.002356, advanceX : 0.027089, flags : 8 }, &quot;.&quot; =&gt; { codePoint : 46, rect : [0.669434, 0.000000, 0.700928, 0.121094], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.022288, flags : 8 }, &quot;/&quot; =&gt; { codePoint : 47, rect : [0.700928, 0.000000, 0.759521, 0.121094], bearingX : -0.002174, bearingY : -0.002174, advanceX : 0.034790, flags : 8 }, &quot;0&quot; =&gt; { codePoint : 48, rect : [0.759521, 0.000000, 0.821045, 0.121094], bearingX : 0.004530, bearingY : 0.004530, advanceX : 0.051098, flags : 4 }, &quot;1&quot; =&gt; { codePoint : 49, rect : [0.821045, 0.000000, 0.865479, 0.121094], bearingX : 0.008426, bearingY : 0.008426, advanceX : 0.051098, flags : 4 }, &quot;2&quot; =&gt; { codePoint : 50, rect : [0.865479, 0.000000, 0.924316, 0.121094], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.051098, flags : 4 }, &quot;3&quot; =&gt; { codePoint : 51, rect : [0.924316, 0.000000, 0.983154, 0.121094], bearingX : 0.004983, bearingY : 0.004983, advanceX : 0.051098, flags : 4 }, &quot;4&quot; =&gt; { codePoint : 52, rect : [0.000000, 0.121094, 0.062988, 0.242188], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.051098, flags : 4 }, &quot;5&quot; =&gt; { codePoint : 53, rect : [0.062988, 0.121094, 0.121094, 0.242188], bearingX : 0.005889, bearingY : 0.005889, advanceX : 0.051098, flags : 4 }, &quot;6&quot; =&gt; { codePoint : 54, rect : [0.121094, 0.121094, 0.181152, 0.242188], bearingX : 0.005708, bearingY : 0.005708, advanceX : 0.051098, flags : 4 }, &quot;7&quot; =&gt; { codePoint : 55, rect : [0.181152, 0.121094, 0.240479, 0.242188], bearingX : 0.005436, bearingY : 0.005436, advanceX : 0.051098, flags : 4 }, &quot;8&quot; =&gt; { codePoint : 56, rect : [0.240479, 0.121094, 0.301025, 0.242188], bearingX : 0.004983, bearingY : 0.004983, advanceX : 0.051098, flags : 4 }, &quot;9&quot; =&gt; { codePoint : 57, rect : [0.301025, 0.121094, 0.361084, 0.242188], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.051098, flags : 4 }, &quot;:&quot; =&gt; { codePoint : 58, rect : [0.361084, 0.121094, 0.392578, 0.242188], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.022288, flags : 8 }, &quot;;&quot; =&gt; { codePoint : 59, rect : [0.392578, 0.121094, 0.425781, 0.242188], bearingX : 0.003443, bearingY : 0.003443, advanceX : 0.022288, flags : 8 }, &quot;&lt;&quot; =&gt; { codePoint : 60, rect : [0.425781, 0.121094, 0.486572, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, &quot;=&quot; =&gt; { codePoint : 61, rect : [0.486572, 0.121094, 0.547363, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, &quot;&gt;&quot; =&gt; { codePoint : 62, rect : [0.547363, 0.121094, 0.608154, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, &quot;?&quot; =&gt; { codePoint : 63, rect : [0.608154, 0.121094, 0.659912, 0.242188], bearingX : 0.001721, bearingY : 0.001721, advanceX : 0.036602, flags : 8 }, &quot;@&quot; =&gt; { codePoint : 64, rect : [0.659912, 0.121094, 0.753662, 0.242188], bearingX : 0.005889, bearingY : 0.005889, advanceX : 0.086070, flags : 8 }, &quot;A&quot; =&gt; { codePoint : 65, rect : [0.753662, 0.121094, 0.831787, 0.242188], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.060068, flags : 2 }, &quot;B&quot; =&gt; { codePoint : 66, rect : [0.831787, 0.121094, 0.896973, 0.242188], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.058256, flags : 2 }, &quot;C&quot; =&gt; { codePoint : 67, rect : [0.896973, 0.121094, 0.965088, 0.242188], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.056172, flags : 2 }, &quot;D&quot; =&gt; { codePoint : 68, rect : [0.000000, 0.242188, 0.071045, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.064598, flags : 2 }, &quot;E&quot; =&gt; { codePoint : 69, rect : [0.071045, 0.242188, 0.131104, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.051733, flags : 2 }, &quot;F&quot; =&gt; { codePoint : 70, rect : [0.131104, 0.242188, 0.188477, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.048652, flags : 2 }, &quot;G&quot; =&gt; { codePoint : 71, rect : [0.188477, 0.242188, 0.257568, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.060883, flags : 2 }, &quot;H&quot; =&gt; { codePoint : 72, rect : [0.257568, 0.242188, 0.325195, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.063873, flags : 2 }, &quot;I&quot; =&gt; { codePoint : 73, rect : [0.325195, 0.242188, 0.353271, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.024371, flags : 2 }, &quot;J&quot; =&gt; { codePoint : 74, rect : [0.353271, 0.242188, 0.409912, 0.363281], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.045300, flags : 2 }, &quot;K&quot; =&gt; { codePoint : 75, rect : [0.409912, 0.242188, 0.478027, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.056987, flags : 2 }, &quot;L&quot; =&gt; { codePoint : 76, rect : [0.478027, 0.242188, 0.535156, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.047021, flags : 2 }, &quot;M&quot; =&gt; { codePoint : 77, rect : [0.535156, 0.242188, 0.621338, 0.363281], bearingX : 0.006070, bearingY : 0.006070, advanceX : 0.078913, flags : 2 }, &quot;N&quot; =&gt; { codePoint : 78, rect : [0.621338, 0.242188, 0.691162, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.065957, flags : 2 }, &quot;O&quot; =&gt; { codePoint : 79, rect : [0.691162, 0.242188, 0.770508, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.070487, flags : 2 }, &quot;P&quot; =&gt; { codePoint : 80, rect : [0.770508, 0.242188, 0.833984, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.055085, flags : 2 }, &quot;Q&quot; =&gt; { codePoint : 81, rect : [0.833984, 0.242188, 0.913330, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.070487, flags : 2 }, &quot;R&quot; =&gt; { codePoint : 82, rect : [0.913330, 0.242188, 0.980225, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.056987, flags : 2 }, &quot;S&quot; =&gt; { codePoint : 83, rect : [0.000000, 0.363281, 0.061768, 0.484375], bearingX : 0.002990, bearingY : 0.002990, advanceX : 0.048199, flags : 2 }, &quot;T&quot; =&gt; { codePoint : 84, rect : [0.061768, 0.363281, 0.129395, 0.484375], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.051189, flags : 2 }, &quot;U&quot; =&gt; { codePoint : 85, rect : [0.129395, 0.363281, 0.196533, 0.484375], bearingX : 0.007339, bearingY : 0.007339, advanceX : 0.062333, flags : 2 }, &quot;V&quot; =&gt; { codePoint : 86, rect : [0.196533, 0.363281, 0.273682, 0.484375], bearingX : 0.000906, bearingY : 0.000906, advanceX : 0.059434, flags : 2 }, &quot;W&quot; =&gt; { codePoint : 87, rect : [0.273682, 0.363281, 0.372070, 0.484375], bearingX : 0.002537, bearingY : 0.002537, advanceX : 0.084167, flags : 2 }, &quot;X&quot; =&gt; { codePoint : 88, rect : [0.372070, 0.363281, 0.444824, 0.484375], bearingX : 0.002084, bearingY : 0.002084, advanceX : 0.057169, flags : 2 }, &quot;Y&quot; =&gt; { codePoint : 89, rect : [0.444824, 0.363281, 0.517334, 0.484375], bearingX : 0.000544, bearingY : 0.000544, advanceX : 0.054179, flags : 2 }, &quot;Z&quot; =&gt; { codePoint : 90, rect : [0.517334, 0.363281, 0.582275, 0.484375], bearingX : 0.002990, bearingY : 0.002990, advanceX : 0.051914, flags : 2 }, &quot;[&quot; =&gt; { codePoint : 91, rect : [0.582275, 0.363281, 0.622070, 0.484375], bearingX : 0.008698, bearingY : 0.008698, advanceX : 0.029807, flags : 8 }, &quot;\\&quot; =&gt; { codePoint : 92, rect : [0.622070, 0.363281, 0.680664, 0.484375], bearingX : -0.002174, bearingY : -0.002174, advanceX : 0.034790, flags : 8 }, &quot;]&quot; =&gt; { codePoint : 93, rect : [0.680664, 0.363281, 0.720459, 0.484375], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.029807, flags : 8 }, &quot;^&quot; =&gt; { codePoint : 94, rect : [0.720459, 0.363281, 0.782471, 0.484375], bearingX : 0.004258, bearingY : 0.004258, advanceX : 0.051098, flags : 8 }, &quot;_&quot; =&gt; { codePoint : 95, rect : [0.782471, 0.363281, 0.847168, 0.484375], bearingX : -0.000362, bearingY : -0.000362, advanceX : 0.044575, flags : 8 }, &quot;`&quot; =&gt; { codePoint : 96, rect : [0.847168, 0.363281, 0.883545, 0.484375], bearingX : 0.005527, bearingY : 0.005527, advanceX : 0.034066, flags : 8 }, &quot;a&quot; =&gt; { codePoint : 97, rect : [0.883545, 0.363281, 0.939697, 0.484375], bearingX : 0.003896, bearingY : 0.003896, advanceX : 0.047293, flags : 1 }, &quot;b&quot; =&gt; { codePoint : 98, rect : [0.000000, 0.484375, 0.060791, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.053363, flags : 1 }, &quot;c&quot; =&gt; { codePoint : 99, rect : [0.060791, 0.484375, 0.115967, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.042129, flags : 1 }, &quot;d&quot; =&gt; { codePoint : 100, rect : [0.115967, 0.484375, 0.176758, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053363, flags : 1 }, &quot;e&quot; =&gt; { codePoint : 101, rect : [0.176758, 0.484375, 0.237305, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.050645, flags : 1 }, &quot;f&quot; =&gt; { codePoint : 102, rect : [0.237305, 0.484375, 0.285156, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.034972, flags : 1 }, &quot;g&quot; =&gt; { codePoint : 103, rect : [0.285156, 0.484375, 0.344971, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.052367, flags : 1 }, &quot;h&quot; =&gt; { codePoint : 104, rect : [0.344971, 0.484375, 0.402344, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.051733, flags : 1 }, &quot;i&quot; =&gt; { codePoint : 105, rect : [0.402344, 0.484375, 0.432617, 0.605469], bearingX : 0.005980, bearingY : 0.005980, advanceX : 0.022922, flags : 1 }, &quot;j&quot; =&gt; { codePoint : 106, rect : [0.432617, 0.484375, 0.475098, 0.605469], bearingX : -0.006161, bearingY : -0.006161, advanceX : 0.022922, flags : 1 }, &quot;k&quot; =&gt; { codePoint : 107, rect : [0.475098, 0.484375, 0.533203, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.047293, flags : 1 }, &quot;l&quot; =&gt; { codePoint : 108, rect : [0.533203, 0.484375, 0.568115, 0.605469], bearingX : 0.007067, bearingY : 0.007067, advanceX : 0.024734, flags : 1 }, &quot;m&quot; =&gt; { codePoint : 109, rect : [0.568115, 0.484375, 0.651611, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.078007, flags : 1 }, &quot;n&quot; =&gt; { codePoint : 110, rect : [0.651611, 0.484375, 0.708984, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.052004, flags : 1 }, &quot;o&quot; =&gt; { codePoint : 111, rect : [0.708984, 0.484375, 0.772705, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053454, flags : 1 }, &quot;p&quot; =&gt; { codePoint : 112, rect : [0.772705, 0.484375, 0.833496, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.053363, flags : 1 }, &quot;q&quot; =&gt; { codePoint : 113, rect : [0.833496, 0.484375, 0.894287, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053363, flags : 1 }, &quot;r&quot; =&gt; { codePoint : 114, rect : [0.894287, 0.484375, 0.940430, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.034972, flags : 1 }, &quot;s&quot; =&gt; { codePoint : 115, rect : [0.940430, 0.484375, 0.993164, 0.605469], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.040408, flags : 1 }, &quot;t&quot; =&gt; { codePoint : 116, rect : [0.000000, 0.605469, 0.047607, 0.726562], bearingX : 0.006704, bearingY : 0.006704, advanceX : 0.036421, flags : 1 }, &quot;u&quot; =&gt; { codePoint : 117, rect : [0.047607, 0.605469, 0.104980, 0.726562], bearingX : 0.006704, bearingY : 0.006704, advanceX : 0.052004, flags : 1 }, &quot;v&quot; =&gt; { codePoint : 118, rect : [0.104980, 0.605469, 0.166992, 0.726562], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.045481, flags : 1 }, &quot;w&quot; =&gt; { codePoint : 119, rect : [0.166992, 0.605469, 0.253418, 0.726562], bearingX : 0.001631, bearingY : 0.001631, advanceX : 0.070396, flags : 1 }, &quot;x&quot; =&gt; { codePoint : 120, rect : [0.253418, 0.605469, 0.316162, 0.726562], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.046297, flags : 1 }, &quot;y&quot; =&gt; { codePoint : 121, rect : [0.316162, 0.605469, 0.378906, 0.726562], bearingX : 0.000181, bearingY : 0.000181, advanceX : 0.045028, flags : 1 }, &quot;z&quot; =&gt; { codePoint : 122, rect : [0.378906, 0.605469, 0.434326, 0.726562], bearingX : 0.003262, bearingY : 0.003262, advanceX : 0.042673, flags : 1 }, &quot;{&quot; =&gt; { codePoint : 123, rect : [0.434326, 0.605469, 0.479492, 0.726562], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.030170, flags : 8 }, &quot;|&quot; =&gt; { codePoint : 124, rect : [0.479492, 0.605469, 0.506836, 0.726562], bearingX : 0.008698, bearingY : 0.008698, advanceX : 0.025277, flags : 8 }, &quot;}&quot; =&gt; { codePoint : 125, rect : [0.506836, 0.605469, 0.552002, 0.726562], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.030170, flags : 8 }, &quot;~&quot; =&gt; { codePoint : 126, rect : [0.552002, 0.605469, 0.614746, 0.726562], bearingX : 0.003805, bearingY : 0.003805, advanceX : 0.051098, flags : 8 }], kern : [&quot;&apos;A&quot; =&gt; -0.007157, &quot;&apos;C&quot; =&gt; -0.002265, &quot;&apos;G&quot; =&gt; -0.002265, &quot;&apos;J&quot; =&gt; -0.011144, &quot;&apos;O&quot; =&gt; -0.002265, &quot;&apos;Q&quot; =&gt; -0.002265, &quot;&apos;V&quot; =&gt; 0.001178, &quot;&apos;W&quot; =&gt; 0.000906, &quot;&apos;Z&quot; =&gt; -0.001087, &quot;()&quot; =&gt; 0.007248, &quot;(C&quot; =&gt; -0.002718, &quot;(G&quot; =&gt; -0.002718, &quot;(O&quot; =&gt; -0.002718, &quot;(Q&quot; =&gt; -0.002718, &quot;(S&quot; =&gt; -0.001631, &quot;(T&quot; =&gt; 0.000997, &quot;(U&quot; =&gt; -0.000906, &quot;(V&quot; =&gt; 0.001359, &quot;(Y&quot; =&gt; 0.001540, &quot;)A&quot; =&gt; -0.001812, &quot;)C&quot; =&gt; -0.001087, &quot;)G&quot; =&gt; -0.001087, &quot;)J&quot; =&gt; -0.001178, &quot;)O&quot; =&gt; -0.001087, &quot;)Q&quot; =&gt; -0.001087, &quot;)S&quot; =&gt; -0.001087, &quot;)T&quot; =&gt; -0.002537, &quot;)V&quot; =&gt; -0.003080, &quot;)W&quot; =&gt; -0.001631, &quot;)X&quot; =&gt; -0.002537, &quot;)Y&quot; =&gt; -0.003896, &quot;)Z&quot; =&gt; -0.001993, &quot;*A&quot; =&gt; -0.005798, &quot;*C&quot; =&gt; -0.000906, &quot;*G&quot; =&gt; -0.000906, &quot;*J&quot; =&gt; -0.011053, &quot;*X&quot; =&gt; -0.002265, &quot;-J&quot; =&gt; -0.002537, &quot;-T&quot; =&gt; -0.004530, &quot;-V&quot; =&gt; -0.001087, &quot;-X&quot; =&gt; -0.002809, &quot;-Y&quot; =&gt; -0.004530, &quot;-Z&quot; =&gt; -0.001450, &quot;.A&quot; =&gt; 0.002265, &quot;.C&quot; =&gt; -0.002627, &quot;.G&quot; =&gt; -0.002627, &quot;.J&quot; =&gt; 0.002537, &quot;.O&quot; =&gt; -0.002990, &quot;.Q&quot; =&gt; -0.002990, &quot;.S&quot; =&gt; 0.001268, &quot;.T&quot; =&gt; -0.006342, &quot;.U&quot; =&gt; -0.002084, &quot;.V&quot; =&gt; -0.006976, &quot;.W&quot; =&gt; -0.003624, &quot;.X&quot; =&gt; 0.000906, &quot;.Y&quot; =&gt; -0.007248, &quot;.Z&quot; =&gt; 0.001721, &quot;/A&quot; =&gt; -0.004530, &quot;/C&quot; =&gt; -0.002446, &quot;/G&quot; =&gt; -0.002446, &quot;/J&quot; =&gt; -0.006433, &quot;/O&quot; =&gt; -0.002356, &quot;/Q&quot; =&gt; -0.002356, &quot;/T&quot; =&gt; 0.002627, &quot;/V&quot; =&gt; 0.002899, &quot;/W&quot; =&gt; 0.001993, &quot;/X&quot; =&gt; 0.001812, &quot;/Y&quot; =&gt; 0.003080, &quot;/Z&quot; =&gt; 0.000815, &quot;:C&quot; =&gt; -0.000997, &quot;:G&quot; =&gt; -0.000997, &quot;:O&quot; =&gt; -0.000997, &quot;:Q&quot; =&gt; -0.000997, &quot;:T&quot; =&gt; -0.007701, &quot;:U&quot; =&gt; -0.001087, &quot;:V&quot; =&gt; -0.001903, &quot;:W&quot; =&gt; -0.001178, &quot;:Y&quot; =&gt; -0.003624, &quot;@A&quot; =&gt; -0.002356, &quot;@C&quot; =&gt; -0.000906, &quot;@G&quot; =&gt; -0.000906, &quot;@J&quot; =&gt; -0.002356, &quot;@O&quot; =&gt; -0.000906, &quot;@Q&quot; =&gt; -0.000906, &quot;@S&quot; =&gt; -0.001631, &quot;@T&quot; =&gt; -0.003986, &quot;@U&quot; =&gt; -0.001087, &quot;@V&quot; =&gt; -0.003262, &quot;@W&quot; =&gt; -0.002084, &quot;@X&quot; =&gt; -0.003533, &quot;@Y&quot; =&gt; -0.004892, &quot;@Z&quot; =&gt; -0.003080, &quot;A&apos;&quot; =&gt; -0.007067, &quot;A(&quot; =&gt; -0.001721, &quot;A*&quot; =&gt; -0.005708, &quot;A.&quot; =&gt; 0.002356, &quot;A/&quot; =&gt; 0.001540, &quot;A@&quot; =&gt; -0.001359, &quot;AA&quot; =&gt; 0.002990, &quot;AC&quot; =&gt; -0.001721, &quot;AG&quot; =&gt; -0.001721, &quot;AJ&quot; =&gt; 0.002627, &quot;AO&quot; =&gt; -0.001721, &quot;AQ&quot; =&gt; -0.001721, &quot;AS&quot; =&gt; 0.001450, &quot;AT&quot; =&gt; -0.005798, &quot;AU&quot; =&gt; -0.000906, &quot;AV&quot; =&gt; -0.005617, &quot;AW&quot; =&gt; -0.001631, &quot;AX&quot; =&gt; 0.002265, &quot;AY&quot; =&gt; -0.007157, &quot;AZ&quot; =&gt; 0.001721, &quot;A]&quot; =&gt; -0.002446, &quot;Ac&quot; =&gt; -0.001178, &quot;Ad&quot; =&gt; -0.001178, &quot;Ae&quot; =&gt; -0.001178, &quot;Ag&quot; =&gt; -0.001450, &quot;Ao&quot; =&gt; -0.001178, &quot;Aq&quot; =&gt; -0.001178, &quot;As&quot; =&gt; 0.001178, &quot;Au&quot; =&gt; -0.001359, &quot;Av&quot; =&gt; -0.001903, &quot;Aw&quot; =&gt; -0.001721, &quot;Ax&quot; =&gt; 0.002356, &quot;Ay&quot; =&gt; -0.001359, &quot;Az&quot; =&gt; 0.001359, &quot;A{&quot; =&gt; -0.001812, &quot;A}&quot; =&gt; -0.000906, &quot;B&apos;&quot; =&gt; -0.000997, &quot;B(&quot; =&gt; -0.000997, &quot;B)&quot; =&gt; -0.002265, &quot;B*&quot; =&gt; -0.000997, &quot;B.&quot; =&gt; -0.000906, &quot;B/&quot; =&gt; -0.001903, &quot;B:&quot; =&gt; -0.000997, &quot;B?&quot; =&gt; -0.001812, &quot;BV&quot; =&gt; -0.001721, &quot;BW&quot; =&gt; -0.001178, &quot;BX&quot; =&gt; -0.001903, &quot;BY&quot; =&gt; -0.002265, &quot;B]&quot; =&gt; -0.003080, &quot;Bz&quot; =&gt; -0.001178, &quot;B}&quot; =&gt; -0.001993, &quot;C(&quot; =&gt; -0.002084, &quot;C-&quot; =&gt; -0.002718, &quot;C.&quot; =&gt; 0.001993, &quot;C?&quot; =&gt; 0.001359, &quot;C@&quot; =&gt; -0.001540, &quot;CA&quot; =&gt; 0.001993, &quot;CC&quot; =&gt; -0.001812, &quot;CG&quot; =&gt; -0.001812, &quot;CJ&quot; =&gt; 0.002084, &quot;CO&quot; =&gt; -0.001812, &quot;CQ&quot; =&gt; -0.001812, &quot;CS&quot; =&gt; 0.000906, &quot;CT&quot; =&gt; 0.001540, &quot;CV&quot; =&gt; 0.001540, &quot;CX&quot; =&gt; 0.001178, &quot;CY&quot; =&gt; 0.001540, &quot;CZ&quot; =&gt; 0.000906, &quot;C[&quot; =&gt; -0.000906, &quot;Cc&quot; =&gt; -0.001359, &quot;Cd&quot; =&gt; -0.001359, &quot;Ce&quot; =&gt; -0.001359, &quot;Cg&quot; =&gt; -0.001359, &quot;Co&quot; =&gt; -0.001359, &quot;Cq&quot; =&gt; -0.001359, &quot;Cu&quot; =&gt; -0.001812, &quot;Cv&quot; =&gt; -0.001450, &quot;Cw&quot; =&gt; -0.001540, &quot;Cx&quot; =&gt; 0.001268, &quot;Cy&quot; =&gt; -0.001450, &quot;C{&quot; =&gt; -0.002537, &quot;D!&quot; =&gt; -0.001268, &quot;D&apos;&quot; =&gt; -0.002356, &quot;D(&quot; =&gt; -0.001087, &quot;D)&quot; =&gt; -0.002990, &quot;D.&quot; =&gt; -0.002990, &quot;D/&quot; =&gt; -0.003896, &quot;D?&quot; =&gt; -0.003533, &quot;D@&quot; =&gt; -0.000997, &quot;DA&quot; =&gt; -0.001721, &quot;DJ&quot; =&gt; -0.002265, &quot;DS&quot; =&gt; -0.000997, &quot;DT&quot; =&gt; -0.002446, &quot;DV&quot; =&gt; -0.001540, &quot;DW&quot; =&gt; -0.001540, &quot;DX&quot; =&gt; -0.002174, &quot;DY&quot; =&gt; -0.003715, &quot;DZ&quot; =&gt; -0.001359, &quot;D[&quot; =&gt; -0.000997, &quot;D]&quot; =&gt; -0.003805, &quot;Da&quot; =&gt; -0.001268, &quot;D}&quot; =&gt; -0.002627, &quot;E&apos;&quot; =&gt; -0.001450, &quot;E(&quot; =&gt; -0.001903, &quot;E*&quot; =&gt; -0.001178, &quot;E.&quot; =&gt; 0.000997, &quot;E@&quot; =&gt; -0.001450, &quot;EA&quot; =&gt; 0.001540, &quot;EC&quot; =&gt; -0.002537, &quot;EG&quot; =&gt; -0.002537, &quot;EJ&quot; =&gt; 0.001540, &quot;EO&quot; =&gt; -0.002537, &quot;EQ&quot; =&gt; -0.002537, &quot;EU&quot; =&gt; -0.001993, &quot;E[&quot; =&gt; -0.001540, &quot;E]&quot; =&gt; -0.003896, &quot;Ec&quot; =&gt; -0.001450, &quot;Ed&quot; =&gt; -0.001540, &quot;Ee&quot; =&gt; -0.001450, &quot;Eg&quot; =&gt; -0.002084, &quot;Eo&quot; =&gt; -0.001540, &quot;Eq&quot; =&gt; -0.001359, &quot;Et&quot; =&gt; -0.001268, &quot;Eu&quot; =&gt; -0.001721, &quot;Ev&quot; =&gt; -0.002265, &quot;Ew&quot; =&gt; -0.002265, &quot;Ex&quot; =&gt; 0.000815, &quot;Ey&quot; =&gt; -0.002265, &quot;E{&quot; =&gt; -0.001721, &quot;E}&quot; =&gt; -0.001993, &quot;F!&quot; =&gt; -0.000906, &quot;F(&quot; =&gt; -0.002174, &quot;F.&quot; =&gt; -0.005889, &quot;F/&quot; =&gt; -0.005436, &quot;F:&quot; =&gt; -0.001631, &quot;F?&quot; =&gt; 0.001178, &quot;F@&quot; =&gt; -0.001631, &quot;FA&quot; =&gt; -0.004168, &quot;FC&quot; =&gt; -0.001178, &quot;FG&quot; =&gt; -0.001178, &quot;FJ&quot; =&gt; -0.007248, &quot;FO&quot; =&gt; -0.001178, &quot;FQ&quot; =&gt; -0.001178, &quot;FT&quot; =&gt; 0.001268, &quot;FV&quot; =&gt; 0.001631, &quot;FY&quot; =&gt; 0.001812, &quot;F[&quot; =&gt; -0.001359, &quot;F]&quot; =&gt; -0.003715, &quot;Fa&quot; =&gt; -0.004621, &quot;Fc&quot; =&gt; -0.001268, &quot;Fd&quot; =&gt; -0.001268, &quot;Fe&quot; =&gt; -0.001268, &quot;Fg&quot; =&gt; -0.001268, &quot;Fn&quot; =&gt; -0.002537, &quot;Fo&quot; =&gt; -0.001268, &quot;Fp&quot; =&gt; -0.002537, &quot;Fq&quot; =&gt; -0.001268, &quot;Fr&quot; =&gt; -0.002537, &quot;Fu&quot; =&gt; -0.002265, &quot;Fx&quot; =&gt; -0.003262, &quot;Fz&quot; =&gt; -0.002356, &quot;G)&quot; =&gt; -0.000906, &quot;G*&quot; =&gt; -0.002265, &quot;G]&quot; =&gt; -0.000906, &quot;Gv&quot; =&gt; -0.001631, &quot;Gy&quot; =&gt; -0.001631, &quot;G}&quot; =&gt; -0.000906, &quot;J)&quot; =&gt; -0.000906, &quot;J.&quot; =&gt; -0.000906, &quot;J/&quot; =&gt; -0.003262, &quot;JA&quot; =&gt; -0.000906, &quot;JJ&quot; =&gt; -0.001359, &quot;JZ&quot; =&gt; -0.001540, &quot;J]&quot; =&gt; -0.003080, &quot;Jz&quot; =&gt; -0.001631, &quot;J}&quot; =&gt; -0.001721, &quot;K(&quot; =&gt; -0.001631, &quot;K*&quot; =&gt; -0.002990, &quot;K-&quot; =&gt; -0.004258, &quot;K.&quot; =&gt; 0.001450, &quot;K/&quot; =&gt; 0.001631, &quot;K?&quot; =&gt; 0.000997, &quot;K@&quot; =&gt; -0.001721, &quot;KA&quot; =&gt; 0.003080, &quot;KC&quot; =&gt; -0.003171, &quot;KG&quot; =&gt; -0.003171, &quot;KJ&quot; =&gt; 0.002446, &quot;KO&quot; =&gt; -0.003171, &quot;KQ&quot; =&gt; -0.003171, &quot;KT&quot; =&gt; 0.001540, &quot;KV&quot; =&gt; 0.001812, &quot;KW&quot; =&gt; 0.000906, &quot;KX&quot; =&gt; 0.002356, &quot;KY&quot; =&gt; 0.001993, &quot;KZ&quot; =&gt; 0.001903, &quot;K]&quot; =&gt; -0.002356, &quot;Kc&quot; =&gt; -0.001903, &quot;Kd&quot; =&gt; -0.001903, &quot;Ke&quot; =&gt; -0.001903, &quot;Kg&quot; =&gt; -0.001903, &quot;Ko&quot; =&gt; -0.001903, &quot;Kq&quot; =&gt; -0.001903, &quot;Ks&quot; =&gt; 0.001268, &quot;Ku&quot; =&gt; -0.001178, &quot;Kv&quot; =&gt; -0.001268, &quot;Kw&quot; =&gt; -0.004349, &quot;Kx&quot; =&gt; 0.002446, &quot;Ky&quot; =&gt; -0.000906, &quot;Kz&quot; =&gt; 0.001450, &quot;K{&quot; =&gt; -0.001721, &quot;L&apos;&quot; =&gt; -0.011416, &quot;L(&quot; =&gt; -0.000906, &quot;L*&quot; =&gt; -0.012593, &quot;L-&quot; =&gt; -0.006251, &quot;L.&quot; =&gt; 0.002084, &quot;L/&quot; =&gt; 0.001087, &quot;LA&quot; =&gt; 0.002537, &quot;LC&quot; =&gt; -0.004077, &quot;LG&quot; =&gt; -0.004077, &quot;LJ&quot; =&gt; 0.002537, &quot;LO&quot; =&gt; -0.004077, &quot;LQ&quot; =&gt; -0.004077, &quot;LS&quot; =&gt; 0.001268, &quot;LT&quot; =&gt; -0.010419, &quot;LU&quot; =&gt; -0.001631, &quot;LV&quot; =&gt; -0.009060, &quot;LW&quot; =&gt; -0.004077, &quot;LX&quot; =&gt; 0.001812, &quot;LY&quot; =&gt; -0.010419, &quot;LZ&quot; =&gt; 0.001268, &quot;L]&quot; =&gt; -0.002899, &quot;Lc&quot; =&gt; -0.001087, &quot;Ld&quot; =&gt; -0.001087, &quot;Le&quot; =&gt; -0.001087, &quot;Lg&quot; =&gt; -0.001087, &quot;Lo&quot; =&gt; -0.001087, &quot;Lq&quot; =&gt; -0.001087, &quot;Lv&quot; =&gt; -0.003624, &quot;Lw&quot; =&gt; -0.003352, &quot;Lx&quot; =&gt; 0.001903, &quot;Ly&quot; =&gt; -0.001812, &quot;Lz&quot; =&gt; 0.000906, &quot;L{&quot; =&gt; -0.002174, &quot;L}&quot; =&gt; -0.001359, &quot;MV&quot; =&gt; -0.000544, &quot;MY&quot; =&gt; -0.000725, &quot;O!&quot; =&gt; -0.001268, &quot;O&apos;&quot; =&gt; -0.002084, &quot;O(&quot; =&gt; -0.001087, &quot;O)&quot; =&gt; -0.002537, &quot;O.&quot; =&gt; -0.002990, &quot;O/&quot; =&gt; -0.003805, &quot;O?&quot; =&gt; -0.003080, &quot;O@&quot; =&gt; -0.000997, &quot;OA&quot; =&gt; -0.001721, &quot;OJ&quot; =&gt; -0.002265, &quot;OS&quot; =&gt; -0.000906, &quot;OT&quot; =&gt; -0.002446, &quot;OV&quot; =&gt; -0.001540, &quot;OW&quot; =&gt; -0.001450, &quot;OX&quot; =&gt; -0.002174, &quot;OY&quot; =&gt; -0.003715, &quot;OZ&quot; =&gt; -0.001359, &quot;O[&quot; =&gt; -0.000906, &quot;O]&quot; =&gt; -0.003805, &quot;Oa&quot; =&gt; -0.001178, &quot;O}&quot; =&gt; -0.002627, &quot;P!&quot; =&gt; -0.000997, &quot;P(&quot; =&gt; -0.001087, &quot;P)&quot; =&gt; -0.002174, &quot;P.&quot; =&gt; -0.008154, &quot;P/&quot; =&gt; -0.005617, &quot;PA&quot; =&gt; -0.004530, &quot;PJ&quot; =&gt; -0.008607, &quot;PX&quot; =&gt; -0.001631, &quot;P[&quot; =&gt; -0.001359, &quot;P]&quot; =&gt; -0.003715, &quot;Pa&quot; =&gt; -0.001721, &quot;Pc&quot; =&gt; -0.001903, &quot;Pd&quot; =&gt; -0.001903, &quot;Pe&quot; =&gt; -0.002899, &quot;Pg&quot; =&gt; -0.001903, &quot;Po&quot; =&gt; -0.001903, &quot;Pq&quot; =&gt; -0.000997, &quot;Pv&quot; =&gt; 0.000906, &quot;Pw&quot; =&gt; 0.000815, &quot;Py&quot; =&gt; 0.000906, &quot;P}&quot; =&gt; -0.002174, &quot;Q!&quot; =&gt; -0.001268, &quot;Q&apos;&quot; =&gt; -0.002084, &quot;Q(&quot; =&gt; -0.001087, &quot;Q.&quot; =&gt; -0.002990, &quot;Q?&quot; =&gt; -0.003080, &quot;Q@&quot; =&gt; -0.000997, &quot;QA&quot; =&gt; -0.001721, &quot;QJ&quot; =&gt; -0.002265, &quot;QS&quot; =&gt; -0.000906, &quot;QT&quot; =&gt; -0.002446, &quot;QV&quot; =&gt; -0.001540, &quot;QW&quot; =&gt; -0.001450, &quot;QX&quot; =&gt; -0.002174, &quot;QY&quot; =&gt; -0.003715, &quot;QZ&quot; =&gt; -0.001359, &quot;Q[&quot; =&gt; -0.000906, &quot;Qa&quot; =&gt; -0.001268, &quot;Qj&quot; =&gt; 0.001359, &quot;R(&quot; =&gt; -0.001087, &quot;R.&quot; =&gt; 0.001268, &quot;R/&quot; =&gt; 0.001087, &quot;R?&quot; =&gt; -0.001178, &quot;R@&quot; =&gt; -0.001359, &quot;RA&quot; =&gt; 0.002537, &quot;RC&quot; =&gt; -0.000997, &quot;RG&quot; =&gt; -0.000997, &quot;RJ&quot; =&gt; 0.001993, &quot;RO&quot; =&gt; -0.000997, &quot;RQ&quot; =&gt; -0.000997, &quot;RV&quot; =&gt; -0.000906, &quot;RX&quot; =&gt; 0.001721, &quot;RY&quot; =&gt; -0.001721, &quot;RZ&quot; =&gt; 0.001268, &quot;R]&quot; =&gt; -0.002990, &quot;Rx&quot; =&gt; 0.001903, &quot;Rz&quot; =&gt; 0.000815, &quot;R{&quot; =&gt; -0.001540, &quot;R}&quot; =&gt; -0.001450, &quot;T(&quot; =&gt; -0.002446, &quot;T)&quot; =&gt; 0.001087, &quot;T-&quot; =&gt; -0.004439, &quot;T.&quot; =&gt; -0.006795, &quot;T/&quot; =&gt; -0.007792, &quot;T:&quot; =&gt; -0.007610, &quot;T?&quot; =&gt; 0.001993, &quot;T@&quot; =&gt; -0.004621, &quot;TA&quot; =&gt; -0.005798, &quot;TC&quot; =&gt; -0.002446, &quot;TG&quot; =&gt; -0.002446, &quot;TJ&quot; =&gt; -0.008154, &quot;TO&quot; =&gt; -0.002446, &quot;TQ&quot; =&gt; -0.002446, &quot;TT&quot; =&gt; 0.002174, &quot;TV&quot; =&gt; 0.002446, &quot;TW&quot; =&gt; 0.001540, &quot;TX&quot; =&gt; 0.001359, &quot;TY&quot; =&gt; 0.002627, &quot;T]&quot; =&gt; -0.002899, &quot;Ta&quot; =&gt; -0.004077, &quot;Tc&quot; =&gt; -0.004983, &quot;Td&quot; =&gt; -0.004983, &quot;Te&quot; =&gt; -0.004983, &quot;Tg&quot; =&gt; -0.004983, &quot;Tn&quot; =&gt; -0.003624, &quot;To&quot; =&gt; -0.004983, &quot;Tp&quot; =&gt; -0.003624, &quot;Tq&quot; =&gt; -0.004983, &quot;Tr&quot; =&gt; -0.003624, &quot;Ts&quot; =&gt; -0.004077, &quot;Tu&quot; =&gt; -0.003080, &quot;Tv&quot; =&gt; -0.001993, &quot;Tw&quot; =&gt; -0.007339, &quot;Tx&quot; =&gt; -0.001631, &quot;Ty&quot; =&gt; -0.001993, &quot;Tz&quot; =&gt; -0.002718, &quot;T{&quot; =&gt; -0.002174, &quot;U(&quot; =&gt; -0.000906, &quot;U.&quot; =&gt; -0.000906, &quot;U/&quot; =&gt; -0.003715, &quot;U:&quot; =&gt; -0.000906, &quot;UA&quot; =&gt; -0.000906, &quot;UJ&quot; =&gt; -0.001359, &quot;UZ&quot; =&gt; -0.001450, &quot;U]&quot; =&gt; -0.003352, &quot;Ua&quot; =&gt; -0.001450, &quot;Uz&quot; =&gt; -0.001631, &quot;U{&quot; =&gt; -0.000906, &quot;U}&quot; =&gt; -0.001993, &quot;V&apos;&quot; =&gt; 0.001268, &quot;V(&quot; =&gt; -0.002990, &quot;V)&quot; =&gt; 0.001450, &quot;V-&quot; =&gt; -0.000906, &quot;V.&quot; =&gt; -0.006795, &quot;V/&quot; =&gt; -0.006070, &quot;V:&quot; =&gt; -0.001812, &quot;V?&quot; =&gt; 0.002174, &quot;V@&quot; =&gt; -0.003443, &quot;VA&quot; =&gt; -0.005617, &quot;VC&quot; =&gt; -0.001540, &quot;VG&quot; =&gt; -0.001540, &quot;VJ&quot; =&gt; -0.008607, &quot;VM&quot; =&gt; -0.000544, &quot;VO&quot; =&gt; -0.001540, &quot;VQ&quot; =&gt; -0.001540, &quot;VT&quot; =&gt; 0.002537, &quot;VV&quot; =&gt; 0.002809, &quot;VW&quot; =&gt; 0.001903, &quot;VX&quot; =&gt; 0.001721, &quot;VY&quot; =&gt; 0.002990, &quot;V]&quot; =&gt; -0.002537, &quot;Va&quot; =&gt; -0.002265, &quot;Vc&quot; =&gt; -0.004077, &quot;Vd&quot; =&gt; -0.004077, &quot;Ve&quot; =&gt; -0.004077, &quot;Vg&quot; =&gt; -0.004077, &quot;Vn&quot; =&gt; -0.002718, &quot;Vo&quot; =&gt; -0.004077, &quot;Vp&quot; =&gt; -0.002718, &quot;Vq&quot; =&gt; -0.004077, &quot;Vr&quot; =&gt; -0.002718, &quot;Vs&quot; =&gt; -0.001359, &quot;Vu&quot; =&gt; -0.002174, &quot;Vz&quot; =&gt; -0.000181, &quot;V{&quot; =&gt; -0.002174, &quot;W&apos;&quot; =&gt; 0.001178, &quot;W(&quot; =&gt; -0.001450, &quot;W.&quot; =&gt; -0.003352, &quot;W/&quot; =&gt; -0.004258, &quot;W:&quot; =&gt; -0.000997, &quot;W?&quot; =&gt; 0.001450, &quot;W@&quot; =&gt; -0.001721, &quot;WA&quot; =&gt; -0.001631, &quot;WC&quot; =&gt; -0.001450, &quot;WG&quot; =&gt; -0.001450, &quot;WJ&quot; =&gt; -0.005436, &quot;WO&quot; =&gt; -0.001450, &quot;WQ&quot; =&gt; -0.001450, &quot;WT&quot; =&gt; 0.001721, &quot;WV&quot; =&gt; 0.001993, &quot;WW&quot; =&gt; 0.001087, &quot;WX&quot; =&gt; 0.000906, &quot;WY&quot; =&gt; 0.002174, &quot;W]&quot; =&gt; -0.003352, &quot;Wa&quot; =&gt; -0.002627, &quot;Wc&quot; =&gt; -0.001993, &quot;Wd&quot; =&gt; -0.001993, &quot;We&quot; =&gt; -0.001993, &quot;Wg&quot; =&gt; -0.002356, &quot;Wn&quot; =&gt; -0.001903, &quot;Wo&quot; =&gt; -0.001993, &quot;Wp&quot; =&gt; -0.001903, &quot;Wq&quot; =&gt; -0.001993, &quot;Wr&quot; =&gt; -0.001903, &quot;Ws&quot; =&gt; -0.001540, &quot;Wu&quot; =&gt; -0.001721, &quot;W{&quot; =&gt; -0.001540, &quot;X(&quot; =&gt; -0.002265, &quot;X*&quot; =&gt; -0.002356, &quot;X-&quot; =&gt; -0.002537, &quot;X.&quot; =&gt; 0.001178, &quot;X/&quot; =&gt; 0.000906, &quot;X@&quot; =&gt; -0.002356, &quot;XA&quot; =&gt; 0.002446, &quot;XC&quot; =&gt; -0.002174, &quot;XG&quot; =&gt; -0.002174, &quot;XJ&quot; =&gt; 0.001812, &quot;XO&quot; =&gt; -0.002174, &quot;XQ&quot; =&gt; -0.002174, &quot;XT&quot; =&gt; 0.001178, &quot;XV&quot; =&gt; 0.001540, &quot;XX&quot; =&gt; 0.001631, &quot;XY&quot; =&gt; 0.001721, &quot;XZ&quot; =&gt; 0.001178, &quot;X]&quot; =&gt; -0.003080, &quot;Xc&quot; =&gt; -0.001631, &quot;Xd&quot; =&gt; -0.001631, &quot;Xe&quot; =&gt; -0.001631, &quot;Xg&quot; =&gt; -0.001631, &quot;Xo&quot; =&gt; -0.001631, &quot;Xq&quot; =&gt; -0.001631, &quot;Xu&quot; =&gt; -0.000906, &quot;Xv&quot; =&gt; -0.000997, &quot;Xw&quot; =&gt; -0.003352, &quot;Xx&quot; =&gt; 0.001721, &quot;Xy&quot; =&gt; -0.000634, &quot;X{&quot; =&gt; -0.002356, &quot;Y(&quot; =&gt; -0.003805, &quot;Y)&quot; =&gt; 0.001631, &quot;Y-&quot; =&gt; -0.004439, &quot;Y.&quot; =&gt; -0.005889, &quot;Y/&quot; =&gt; -0.007429, &quot;Y:&quot; =&gt; -0.003443, &quot;Y?&quot; =&gt; 0.002265, &quot;Y@&quot; =&gt; -0.005255, &quot;YA&quot; =&gt; -0.007157, &quot;YC&quot; =&gt; -0.003715, &quot;YG&quot; =&gt; -0.003715, &quot;YJ&quot; =&gt; -0.010419, &quot;YM&quot; =&gt; -0.000725, &quot;YO&quot; =&gt; -0.003715, &quot;YQ&quot; =&gt; -0.003715, &quot;YT&quot; =&gt; 0.002718, &quot;YV&quot; =&gt; 0.002990, &quot;YW&quot; =&gt; 0.002084, &quot;YX&quot; =&gt; 0.001903, &quot;YY&quot; =&gt; 0.003171, &quot;YZ&quot; =&gt; 0.000997, &quot;Y]&quot; =&gt; -0.002356, &quot;Ya&quot; =&gt; -0.003715, &quot;Yc&quot; =&gt; -0.004439, &quot;Yd&quot; =&gt; -0.004439, &quot;Ye&quot; =&gt; -0.004439, &quot;Yg&quot; =&gt; -0.004439, &quot;Yn&quot; =&gt; -0.003624, &quot;Yo&quot; =&gt; -0.004439, &quot;Yp&quot; =&gt; -0.003624, &quot;Yq&quot; =&gt; -0.004439, &quot;Yr&quot; =&gt; -0.003624, &quot;Ys&quot; =&gt; -0.001812, &quot;Yu&quot; =&gt; -0.003080, &quot;Yx&quot; =&gt; -0.001359, &quot;Yz&quot; =&gt; -0.002537, &quot;Y{&quot; =&gt; -0.001993, &quot;Z(&quot; =&gt; -0.001903, &quot;Z-&quot; =&gt; -0.005436, &quot;Z.&quot; =&gt; 0.000997, &quot;Z@&quot; =&gt; -0.001450, &quot;ZA&quot; =&gt; 0.001540, &quot;ZC&quot; =&gt; -0.003262, &quot;ZG&quot; =&gt; -0.003262, &quot;ZJ&quot; =&gt; 0.001540, &quot;ZO&quot; =&gt; -0.003262, &quot;ZQ&quot; =&gt; -0.003262, &quot;ZU&quot; =&gt; -0.001268, &quot;ZV&quot; =&gt; 0.000906, &quot;ZY&quot; =&gt; 0.001087, &quot;Z[&quot; =&gt; -0.001540, &quot;Z]&quot; =&gt; -0.003896, &quot;Zc&quot; =&gt; -0.001450, &quot;Zd&quot; =&gt; -0.001540, &quot;Ze&quot; =&gt; -0.001450, &quot;Zg&quot; =&gt; -0.002084, &quot;Zo&quot; =&gt; -0.001540, &quot;Zq&quot; =&gt; -0.001359, &quot;Zt&quot; =&gt; -0.001178, &quot;Zu&quot; =&gt; -0.001721, &quot;Zv&quot; =&gt; -0.002084, &quot;Zw&quot; =&gt; -0.002174, &quot;Zx&quot; =&gt; 0.000815, &quot;Zy&quot; =&gt; -0.002084, &quot;Z{&quot; =&gt; -0.003171, &quot;Z}&quot; =&gt; -0.001359, &quot;[A&quot; =&gt; -0.002537, &quot;[C&quot; =&gt; -0.003896, &quot;[G&quot; =&gt; -0.003896, &quot;[J&quot; =&gt; -0.002537, &quot;[O&quot; =&gt; -0.003896, &quot;[Q&quot; =&gt; -0.003896, &quot;[S&quot; =&gt; -0.002356, &quot;[T&quot; =&gt; -0.002990, &quot;[U&quot; =&gt; -0.003443, &quot;[V&quot; =&gt; -0.002627, &quot;[W&quot; =&gt; -0.003352, &quot;[X&quot; =&gt; -0.003262, &quot;[Y&quot; =&gt; -0.002446, &quot;[Z&quot; =&gt; -0.003715, &quot;[]&quot; =&gt; 0.007248, &quot;]C&quot; =&gt; -0.000906, &quot;]G&quot; =&gt; -0.000906, &quot;]O&quot; =&gt; -0.000906, &quot;]Q&quot; =&gt; -0.000906, &quot;]W&quot; =&gt; -0.000906, &quot;]X&quot; =&gt; -0.000906, &quot;]Z&quot; =&gt; -0.001450, &quot;a&apos;&quot; =&gt; -0.002446, &quot;a)&quot; =&gt; -0.002174, &quot;a*&quot; =&gt; -0.001812, &quot;a?&quot; =&gt; -0.002537, &quot;a]&quot; =&gt; -0.002718, &quot;av&quot; =&gt; -0.001359, &quot;aw&quot; =&gt; -0.001087, &quot;ay&quot; =&gt; -0.001359, &quot;a}&quot; =&gt; -0.001903, &quot;b&apos;&quot; =&gt; -0.003352, &quot;b)&quot; =&gt; -0.002446, &quot;b/&quot; =&gt; -0.001993, &quot;b?&quot; =&gt; -0.002537, &quot;b]&quot; =&gt; -0.002718, &quot;bv&quot; =&gt; -0.001178, &quot;bw&quot; =&gt; -0.001087, &quot;bx&quot; =&gt; -0.001540, &quot;by&quot; =&gt; -0.001178, &quot;bz&quot; =&gt; -0.001812, &quot;b}&quot; =&gt; -0.001903, &quot;c-&quot; =&gt; -0.002899, &quot;c.&quot; =&gt; 0.000906, &quot;c]&quot; =&gt; -0.002446, &quot;cd&quot; =&gt; -0.001087, &quot;cg&quot; =&gt; -0.001450, &quot;co&quot; =&gt; -0.001178, &quot;cv&quot; =&gt; 0.000997, &quot;cw&quot; =&gt; 0.000906, &quot;cx&quot; =&gt; 0.001450, &quot;cy&quot; =&gt; 0.000997, &quot;c{&quot; =&gt; -0.001903, &quot;f)&quot; =&gt; 0.003533, &quot;f*&quot; =&gt; 0.000997, &quot;f-&quot; =&gt; -0.003171, &quot;f.&quot; =&gt; -0.004711, &quot;f/&quot; =&gt; -0.003805, &quot;f?&quot; =&gt; 0.002174, &quot;f]&quot; =&gt; 0.003533, &quot;fv&quot; =&gt; 0.001721, &quot;fw&quot; =&gt; 0.001631, &quot;fx&quot; =&gt; 0.001359, &quot;fy&quot; =&gt; 0.001721, &quot;f}&quot; =&gt; 0.003533, &quot;h&apos;&quot; =&gt; -0.003352, &quot;h)&quot; =&gt; -0.002174, &quot;h*&quot; =&gt; -0.001903, &quot;h?&quot; =&gt; -0.002446, &quot;h]&quot; =&gt; -0.002627, &quot;hv&quot; =&gt; -0.001359, &quot;hw&quot; =&gt; -0.001178, &quot;hy&quot; =&gt; -0.001540, &quot;h}&quot; =&gt; -0.001903, &quot;jj&quot; =&gt; 0.000815, &quot;k-&quot; =&gt; -0.002446, &quot;k/&quot; =&gt; 0.000997, &quot;k@&quot; =&gt; -0.001812, &quot;k]&quot; =&gt; -0.002265, &quot;kc&quot; =&gt; -0.002356, &quot;kd&quot; =&gt; -0.002356, &quot;ke&quot; =&gt; -0.002356, &quot;kg&quot; =&gt; -0.002627, &quot;ko&quot; =&gt; -0.002627, &quot;kq&quot; =&gt; -0.002356, &quot;kx&quot; =&gt; 0.001721, &quot;k{&quot; =&gt; -0.001721, &quot;n&apos;&quot; =&gt; -0.002809, &quot;n)&quot; =&gt; -0.002265, &quot;n*&quot; =&gt; -0.001993, &quot;n?&quot; =&gt; -0.002537, &quot;n]&quot; =&gt; -0.002718, &quot;nv&quot; =&gt; -0.001450, &quot;nw&quot; =&gt; -0.001268, &quot;ny&quot; =&gt; -0.001631, &quot;n}&quot; =&gt; -0.001903, &quot;o&apos;&quot; =&gt; -0.002899, &quot;o)&quot; =&gt; -0.002446, &quot;o*&quot; =&gt; -0.001812, &quot;o/&quot; =&gt; -0.002084, &quot;o?&quot; =&gt; -0.002718, &quot;o]&quot; =&gt; -0.002718, &quot;ov&quot; =&gt; -0.001268, &quot;ow&quot; =&gt; -0.001178, &quot;ox&quot; =&gt; -0.001540, &quot;oy&quot; =&gt; -0.001268, &quot;oz&quot; =&gt; -0.001812, &quot;o}&quot; =&gt; -0.001903, &quot;p&apos;&quot; =&gt; -0.002899, &quot;p)&quot; =&gt; -0.002446, &quot;p*&quot; =&gt; -0.001812, &quot;p/&quot; =&gt; -0.001993, &quot;p?&quot; =&gt; -0.002537, &quot;p]&quot; =&gt; -0.002718, &quot;pv&quot; =&gt; -0.001268, &quot;pw&quot; =&gt; -0.001087, &quot;px&quot; =&gt; -0.001540, &quot;py&quot; =&gt; -0.001268, &quot;pz&quot; =&gt; -0.001631, &quot;p}&quot; =&gt; -0.001903, &quot;qj&quot; =&gt; 0.002718, &quot;r*&quot; =&gt; 0.001087, &quot;r-&quot; =&gt; -0.002899, &quot;r.&quot; =&gt; -0.004983, &quot;r/&quot; =&gt; -0.004168, &quot;r?&quot; =&gt; -0.003896, &quot;r]&quot; =&gt; -0.002174, &quot;rq&quot; =&gt; -0.001087, &quot;rv&quot; =&gt; 0.001903, &quot;rw&quot; =&gt; 0.001721, &quot;rx&quot; =&gt; 0.001450, &quot;ry&quot; =&gt; 0.001903, &quot;t-&quot; =&gt; -0.003533, &quot;t.&quot; =&gt; 0.000997, &quot;t]&quot; =&gt; -0.002446, &quot;tc&quot; =&gt; -0.001178, &quot;td&quot; =&gt; -0.001268, &quot;te&quot; =&gt; -0.000906, &quot;tg&quot; =&gt; -0.000906, &quot;to&quot; =&gt; -0.001268, &quot;tq&quot; =&gt; -0.001087, &quot;tx&quot; =&gt; 0.001540, &quot;t{&quot; =&gt; -0.001903, &quot;v*&quot; =&gt; 0.000815, &quot;v.&quot; =&gt; -0.003171, &quot;v/&quot; =&gt; -0.002899, &quot;v?&quot; =&gt; -0.003533, &quot;v]&quot; =&gt; -0.002356, &quot;vc&quot; =&gt; -0.001359, &quot;vd&quot; =&gt; -0.001268, &quot;ve&quot; =&gt; -0.001268, &quot;vg&quot; =&gt; -0.001178, &quot;vo&quot; =&gt; -0.001268, &quot;vq&quot; =&gt; -0.001268, &quot;vv&quot; =&gt; 0.001631, &quot;vw&quot; =&gt; 0.001540, &quot;vx&quot; =&gt; 0.001268, &quot;vy&quot; =&gt; 0.001631, &quot;w*&quot; =&gt; 0.000815, &quot;w.&quot; =&gt; -0.002899, &quot;w/&quot; =&gt; -0.002537, &quot;w?&quot; =&gt; -0.003171, &quot;w]&quot; =&gt; -0.002356, &quot;wc&quot; =&gt; -0.001178, &quot;wo&quot; =&gt; -0.001087, &quot;wv&quot; =&gt; 0.001631, &quot;ww&quot; =&gt; 0.001540, &quot;wx&quot; =&gt; 0.001268, &quot;wy&quot; =&gt; 0.001631, &quot;x]&quot; =&gt; -0.002446, &quot;xc&quot; =&gt; -0.001903, &quot;xd&quot; =&gt; -0.001903, &quot;xe&quot; =&gt; -0.001903, &quot;xg&quot; =&gt; -0.001903, &quot;xo&quot; =&gt; -0.001903, &quot;xq&quot; =&gt; -0.001903, &quot;xx&quot; =&gt; 0.001540, &quot;x{&quot; =&gt; -0.001903, &quot;z]&quot; =&gt; -0.003080, &quot;zc&quot; =&gt; -0.001721, &quot;zd&quot; =&gt; -0.001812, &quot;ze&quot; =&gt; -0.001721, &quot;zf&quot; =&gt; -0.001087, &quot;zg&quot; =&gt; -0.001993, &quot;zo&quot; =&gt; -0.001812, &quot;zq&quot; =&gt; -0.001631, &quot;zt&quot; =&gt; -0.001178, &quot;zu&quot; =&gt; -0.001178, &quot;z{&quot; =&gt; -0.002537, &quot;z}&quot; =&gt; -0.001903, &quot;{A&quot; =&gt; -0.001087, &quot;{C&quot; =&gt; -0.002356, &quot;{G&quot; =&gt; -0.002718, &quot;{J&quot; =&gt; -0.001087, &quot;{O&quot; =&gt; -0.002718, &quot;{Q&quot; =&gt; -0.002718, &quot;{S&quot; =&gt; -0.001903, &quot;{U&quot; =&gt; -0.002084, &quot;{Z&quot; =&gt; -0.001631, &quot;{}&quot; =&gt; 0.007248, &quot;}A&quot; =&gt; -0.001903, &quot;}J&quot; =&gt; -0.001903, &quot;}S&quot; =&gt; -0.001631, &quot;}T&quot; =&gt; -0.002265, &quot;}U&quot; =&gt; -0.000997, &quot;}V&quot; =&gt; -0.002265, &quot;}W&quot; =&gt; -0.001721, &quot;}X&quot; =&gt; -0.002627, &quot;}Y&quot; =&gt; -0.002174, &quot;}Z&quot; =&gt; -0.003080] }" line="11" static="1">
			<c path="xGLfonts.structs.FontData"/>
			<meta><m n=":value"><e><![CDATA[{ ix : 0.009766, iy : 0.009766, aspect : 1.000000, rowHeight : 0.121094, ascent : 0.083984, descent : 0.017578, lineGap : 0.002537, capHeight : 0.062786, xHeight : 0.048112, spaceAdvance : 0.020929, chars : ["!" => { codePoint : 33, rect : [0.000000, 0.000000, 0.031494, 0.121094], bearingX : 0.006433, bearingY : 0.006433, advanceX : 0.025006, flags : 8 }, "\"" => { codePoint : 34, rect : [0.031494, 0.000000, 0.075684, 0.121094], bearingX : 0.006523, bearingY : 0.006523, advanceX : 0.037871, flags : 8 }, "#" => { codePoint : 35, rect : [0.075684, 0.000000, 0.146729, 0.121094], bearingX : 0.004439, bearingY : 0.004439, advanceX : 0.060430, flags : 8 }, "$" => { codePoint : 36, rect : [0.146729, 0.000000, 0.205811, 0.121094], bearingX : 0.005527, bearingY : 0.005527, advanceX : 0.051098, flags : 8 }, "%" => { codePoint : 37, rect : [0.205811, 0.000000, 0.293945, 0.121094], bearingX : 0.004530, bearingY : 0.004530, advanceX : 0.077735, flags : 8 }, "&" => { codePoint : 38, rect : [0.293945, 0.000000, 0.368408, 0.121094], bearingX : 0.004168, bearingY : 0.004168, advanceX : 0.060340, flags : 8 }, "'" => { codePoint : 39, rect : [0.368408, 0.000000, 0.396484, 0.121094], bearingX : 0.006523, bearingY : 0.006523, advanceX : 0.021835, flags : 8 }, "(" => { codePoint : 40, rect : [0.396484, 0.000000, 0.437500, 0.121094], bearingX : 0.007067, bearingY : 0.007067, advanceX : 0.029354, flags : 8 }, ")" => { codePoint : 41, rect : [0.437500, 0.000000, 0.478516, 0.121094], bearingX : 0.000634, bearingY : 0.000634, advanceX : 0.029354, flags : 8 }, "*" => { codePoint : 42, rect : [0.478516, 0.000000, 0.534668, 0.121094], bearingX : 0.003352, bearingY : 0.003352, advanceX : 0.043488, flags : 8 }, "+" => { codePoint : 43, rect : [0.534668, 0.000000, 0.595459, 0.121094], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, "," => { codePoint : 44, rect : [0.595459, 0.000000, 0.627686, 0.121094], bearingX : 0.003443, bearingY : 0.003443, advanceX : 0.022288, flags : 8 }, "-" => { codePoint : 45, rect : [0.627686, 0.000000, 0.669434, 0.121094], bearingX : 0.002356, bearingY : 0.002356, advanceX : 0.027089, flags : 8 }, "." => { codePoint : 46, rect : [0.669434, 0.000000, 0.700928, 0.121094], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.022288, flags : 8 }, "/" => { codePoint : 47, rect : [0.700928, 0.000000, 0.759521, 0.121094], bearingX : -0.002174, bearingY : -0.002174, advanceX : 0.034790, flags : 8 }, "0" => { codePoint : 48, rect : [0.759521, 0.000000, 0.821045, 0.121094], bearingX : 0.004530, bearingY : 0.004530, advanceX : 0.051098, flags : 4 }, "1" => { codePoint : 49, rect : [0.821045, 0.000000, 0.865479, 0.121094], bearingX : 0.008426, bearingY : 0.008426, advanceX : 0.051098, flags : 4 }, "2" => { codePoint : 50, rect : [0.865479, 0.000000, 0.924316, 0.121094], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.051098, flags : 4 }, "3" => { codePoint : 51, rect : [0.924316, 0.000000, 0.983154, 0.121094], bearingX : 0.004983, bearingY : 0.004983, advanceX : 0.051098, flags : 4 }, "4" => { codePoint : 52, rect : [0.000000, 0.121094, 0.062988, 0.242188], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.051098, flags : 4 }, "5" => { codePoint : 53, rect : [0.062988, 0.121094, 0.121094, 0.242188], bearingX : 0.005889, bearingY : 0.005889, advanceX : 0.051098, flags : 4 }, "6" => { codePoint : 54, rect : [0.121094, 0.121094, 0.181152, 0.242188], bearingX : 0.005708, bearingY : 0.005708, advanceX : 0.051098, flags : 4 }, "7" => { codePoint : 55, rect : [0.181152, 0.121094, 0.240479, 0.242188], bearingX : 0.005436, bearingY : 0.005436, advanceX : 0.051098, flags : 4 }, "8" => { codePoint : 56, rect : [0.240479, 0.121094, 0.301025, 0.242188], bearingX : 0.004983, bearingY : 0.004983, advanceX : 0.051098, flags : 4 }, "9" => { codePoint : 57, rect : [0.301025, 0.121094, 0.361084, 0.242188], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.051098, flags : 4 }, ":" => { codePoint : 58, rect : [0.361084, 0.121094, 0.392578, 0.242188], bearingX : 0.005074, bearingY : 0.005074, advanceX : 0.022288, flags : 8 }, ";" => { codePoint : 59, rect : [0.392578, 0.121094, 0.425781, 0.242188], bearingX : 0.003443, bearingY : 0.003443, advanceX : 0.022288, flags : 8 }, "<" => { codePoint : 60, rect : [0.425781, 0.121094, 0.486572, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, "=" => { codePoint : 61, rect : [0.486572, 0.121094, 0.547363, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, ">" => { codePoint : 62, rect : [0.547363, 0.121094, 0.608154, 0.242188], bearingX : 0.004802, bearingY : 0.004802, advanceX : 0.051098, flags : 8 }, "?" => { codePoint : 63, rect : [0.608154, 0.121094, 0.659912, 0.242188], bearingX : 0.001721, bearingY : 0.001721, advanceX : 0.036602, flags : 8 }, "@" => { codePoint : 64, rect : [0.659912, 0.121094, 0.753662, 0.242188], bearingX : 0.005889, bearingY : 0.005889, advanceX : 0.086070, flags : 8 }, "A" => { codePoint : 65, rect : [0.753662, 0.121094, 0.831787, 0.242188], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.060068, flags : 2 }, "B" => { codePoint : 66, rect : [0.831787, 0.121094, 0.896973, 0.242188], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.058256, flags : 2 }, "C" => { codePoint : 67, rect : [0.896973, 0.121094, 0.965088, 0.242188], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.056172, flags : 2 }, "D" => { codePoint : 68, rect : [0.000000, 0.242188, 0.071045, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.064598, flags : 2 }, "E" => { codePoint : 69, rect : [0.071045, 0.242188, 0.131104, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.051733, flags : 2 }, "F" => { codePoint : 70, rect : [0.131104, 0.242188, 0.188477, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.048652, flags : 2 }, "G" => { codePoint : 71, rect : [0.188477, 0.242188, 0.257568, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.060883, flags : 2 }, "H" => { codePoint : 72, rect : [0.257568, 0.242188, 0.325195, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.063873, flags : 2 }, "I" => { codePoint : 73, rect : [0.325195, 0.242188, 0.353271, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.024371, flags : 2 }, "J" => { codePoint : 74, rect : [0.353271, 0.242188, 0.409912, 0.363281], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.045300, flags : 2 }, "K" => { codePoint : 75, rect : [0.409912, 0.242188, 0.478027, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.056987, flags : 2 }, "L" => { codePoint : 76, rect : [0.478027, 0.242188, 0.535156, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.047021, flags : 2 }, "M" => { codePoint : 77, rect : [0.535156, 0.242188, 0.621338, 0.363281], bearingX : 0.006070, bearingY : 0.006070, advanceX : 0.078913, flags : 2 }, "N" => { codePoint : 78, rect : [0.621338, 0.242188, 0.691162, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.065957, flags : 2 }, "O" => { codePoint : 79, rect : [0.691162, 0.242188, 0.770508, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.070487, flags : 2 }, "P" => { codePoint : 80, rect : [0.770508, 0.242188, 0.833984, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.055085, flags : 2 }, "Q" => { codePoint : 81, rect : [0.833984, 0.242188, 0.913330, 0.363281], bearingX : 0.005255, bearingY : 0.005255, advanceX : 0.070487, flags : 2 }, "R" => { codePoint : 82, rect : [0.913330, 0.242188, 0.980225, 0.363281], bearingX : 0.007792, bearingY : 0.007792, advanceX : 0.056987, flags : 2 }, "S" => { codePoint : 83, rect : [0.000000, 0.363281, 0.061768, 0.484375], bearingX : 0.002990, bearingY : 0.002990, advanceX : 0.048199, flags : 2 }, "T" => { codePoint : 84, rect : [0.061768, 0.363281, 0.129395, 0.484375], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.051189, flags : 2 }, "U" => { codePoint : 85, rect : [0.129395, 0.363281, 0.196533, 0.484375], bearingX : 0.007339, bearingY : 0.007339, advanceX : 0.062333, flags : 2 }, "V" => { codePoint : 86, rect : [0.196533, 0.363281, 0.273682, 0.484375], bearingX : 0.000906, bearingY : 0.000906, advanceX : 0.059434, flags : 2 }, "W" => { codePoint : 87, rect : [0.273682, 0.363281, 0.372070, 0.484375], bearingX : 0.002537, bearingY : 0.002537, advanceX : 0.084167, flags : 2 }, "X" => { codePoint : 88, rect : [0.372070, 0.363281, 0.444824, 0.484375], bearingX : 0.002084, bearingY : 0.002084, advanceX : 0.057169, flags : 2 }, "Y" => { codePoint : 89, rect : [0.444824, 0.363281, 0.517334, 0.484375], bearingX : 0.000544, bearingY : 0.000544, advanceX : 0.054179, flags : 2 }, "Z" => { codePoint : 90, rect : [0.517334, 0.363281, 0.582275, 0.484375], bearingX : 0.002990, bearingY : 0.002990, advanceX : 0.051914, flags : 2 }, "[" => { codePoint : 91, rect : [0.582275, 0.363281, 0.622070, 0.484375], bearingX : 0.008698, bearingY : 0.008698, advanceX : 0.029807, flags : 8 }, "\\" => { codePoint : 92, rect : [0.622070, 0.363281, 0.680664, 0.484375], bearingX : -0.002174, bearingY : -0.002174, advanceX : 0.034790, flags : 8 }, "]" => { codePoint : 93, rect : [0.680664, 0.363281, 0.720459, 0.484375], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.029807, flags : 8 }, "^" => { codePoint : 94, rect : [0.720459, 0.363281, 0.782471, 0.484375], bearingX : 0.004258, bearingY : 0.004258, advanceX : 0.051098, flags : 8 }, "_" => { codePoint : 95, rect : [0.782471, 0.363281, 0.847168, 0.484375], bearingX : -0.000362, bearingY : -0.000362, advanceX : 0.044575, flags : 8 }, "`" => { codePoint : 96, rect : [0.847168, 0.363281, 0.883545, 0.484375], bearingX : 0.005527, bearingY : 0.005527, advanceX : 0.034066, flags : 8 }, "a" => { codePoint : 97, rect : [0.883545, 0.363281, 0.939697, 0.484375], bearingX : 0.003896, bearingY : 0.003896, advanceX : 0.047293, flags : 1 }, "b" => { codePoint : 98, rect : [0.000000, 0.484375, 0.060791, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.053363, flags : 1 }, "c" => { codePoint : 99, rect : [0.060791, 0.484375, 0.115967, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.042129, flags : 1 }, "d" => { codePoint : 100, rect : [0.115967, 0.484375, 0.176758, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053363, flags : 1 }, "e" => { codePoint : 101, rect : [0.176758, 0.484375, 0.237305, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.050645, flags : 1 }, "f" => { codePoint : 102, rect : [0.237305, 0.484375, 0.285156, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.034972, flags : 1 }, "g" => { codePoint : 103, rect : [0.285156, 0.484375, 0.344971, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.052367, flags : 1 }, "h" => { codePoint : 104, rect : [0.344971, 0.484375, 0.402344, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.051733, flags : 1 }, "i" => { codePoint : 105, rect : [0.402344, 0.484375, 0.432617, 0.605469], bearingX : 0.005980, bearingY : 0.005980, advanceX : 0.022922, flags : 1 }, "j" => { codePoint : 106, rect : [0.432617, 0.484375, 0.475098, 0.605469], bearingX : -0.006161, bearingY : -0.006161, advanceX : 0.022922, flags : 1 }, "k" => { codePoint : 107, rect : [0.475098, 0.484375, 0.533203, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.047293, flags : 1 }, "l" => { codePoint : 108, rect : [0.533203, 0.484375, 0.568115, 0.605469], bearingX : 0.007067, bearingY : 0.007067, advanceX : 0.024734, flags : 1 }, "m" => { codePoint : 109, rect : [0.568115, 0.484375, 0.651611, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.078007, flags : 1 }, "n" => { codePoint : 110, rect : [0.651611, 0.484375, 0.708984, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.052004, flags : 1 }, "o" => { codePoint : 111, rect : [0.708984, 0.484375, 0.772705, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053454, flags : 1 }, "p" => { codePoint : 112, rect : [0.772705, 0.484375, 0.833496, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.053363, flags : 1 }, "q" => { codePoint : 113, rect : [0.833496, 0.484375, 0.894287, 0.605469], bearingX : 0.004621, bearingY : 0.004621, advanceX : 0.053363, flags : 1 }, "r" => { codePoint : 114, rect : [0.894287, 0.484375, 0.940430, 0.605469], bearingX : 0.007248, bearingY : 0.007248, advanceX : 0.034972, flags : 1 }, "s" => { codePoint : 115, rect : [0.940430, 0.484375, 0.993164, 0.605469], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.040408, flags : 1 }, "t" => { codePoint : 116, rect : [0.000000, 0.605469, 0.047607, 0.726562], bearingX : 0.006704, bearingY : 0.006704, advanceX : 0.036421, flags : 1 }, "u" => { codePoint : 117, rect : [0.047607, 0.605469, 0.104980, 0.726562], bearingX : 0.006704, bearingY : 0.006704, advanceX : 0.052004, flags : 1 }, "v" => { codePoint : 118, rect : [0.104980, 0.605469, 0.166992, 0.726562], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.045481, flags : 1 }, "w" => { codePoint : 119, rect : [0.166992, 0.605469, 0.253418, 0.726562], bearingX : 0.001631, bearingY : 0.001631, advanceX : 0.070396, flags : 1 }, "x" => { codePoint : 120, rect : [0.253418, 0.605469, 0.316162, 0.726562], bearingX : 0.001450, bearingY : 0.001450, advanceX : 0.046297, flags : 1 }, "y" => { codePoint : 121, rect : [0.316162, 0.605469, 0.378906, 0.726562], bearingX : 0.000181, bearingY : 0.000181, advanceX : 0.045028, flags : 1 }, "z" => { codePoint : 122, rect : [0.378906, 0.605469, 0.434326, 0.726562], bearingX : 0.003262, bearingY : 0.003262, advanceX : 0.042673, flags : 1 }, "{" => { codePoint : 123, rect : [0.434326, 0.605469, 0.479492, 0.726562], bearingX : 0.003624, bearingY : 0.003624, advanceX : 0.030170, flags : 8 }, "|" => { codePoint : 124, rect : [0.479492, 0.605469, 0.506836, 0.726562], bearingX : 0.008698, bearingY : 0.008698, advanceX : 0.025277, flags : 8 }, "}" => { codePoint : 125, rect : [0.506836, 0.605469, 0.552002, 0.726562], bearingX : 0.000725, bearingY : 0.000725, advanceX : 0.030170, flags : 8 }, "~" => { codePoint : 126, rect : [0.552002, 0.605469, 0.614746, 0.726562], bearingX : 0.003805, bearingY : 0.003805, advanceX : 0.051098, flags : 8 }], kern : ["'A" => -0.007157, "'C" => -0.002265, "'G" => -0.002265, "'J" => -0.011144, "'O" => -0.002265, "'Q" => -0.002265, "'V" => 0.001178, "'W" => 0.000906, "'Z" => -0.001087, "()" => 0.007248, "(C" => -0.002718, "(G" => -0.002718, "(O" => -0.002718, "(Q" => -0.002718, "(S" => -0.001631, "(T" => 0.000997, "(U" => -0.000906, "(V" => 0.001359, "(Y" => 0.001540, ")A" => -0.001812, ")C" => -0.001087, ")G" => -0.001087, ")J" => -0.001178, ")O" => -0.001087, ")Q" => -0.001087, ")S" => -0.001087, ")T" => -0.002537, ")V" => -0.003080, ")W" => -0.001631, ")X" => -0.002537, ")Y" => -0.003896, ")Z" => -0.001993, "*A" => -0.005798, "*C" => -0.000906, "*G" => -0.000906, "*J" => -0.011053, "*X" => -0.002265, "-J" => -0.002537, "-T" => -0.004530, "-V" => -0.001087, "-X" => -0.002809, "-Y" => -0.004530, "-Z" => -0.001450, ".A" => 0.002265, ".C" => -0.002627, ".G" => -0.002627, ".J" => 0.002537, ".O" => -0.002990, ".Q" => -0.002990, ".S" => 0.001268, ".T" => -0.006342, ".U" => -0.002084, ".V" => -0.006976, ".W" => -0.003624, ".X" => 0.000906, ".Y" => -0.007248, ".Z" => 0.001721, "/A" => -0.004530, "/C" => -0.002446, "/G" => -0.002446, "/J" => -0.006433, "/O" => -0.002356, "/Q" => -0.002356, "/T" => 0.002627, "/V" => 0.002899, "/W" => 0.001993, "/X" => 0.001812, "/Y" => 0.003080, "/Z" => 0.000815, ":C" => -0.000997, ":G" => -0.000997, ":O" => -0.000997, ":Q" => -0.000997, ":T" => -0.007701, ":U" => -0.001087, ":V" => -0.001903, ":W" => -0.001178, ":Y" => -0.003624, "@A" => -0.002356, "@C" => -0.000906, "@G" => -0.000906, "@J" => -0.002356, "@O" => -0.000906, "@Q" => -0.000906, "@S" => -0.001631, "@T" => -0.003986, "@U" => -0.001087, "@V" => -0.003262, "@W" => -0.002084, "@X" => -0.003533, "@Y" => -0.004892, "@Z" => -0.003080, "A'" => -0.007067, "A(" => -0.001721, "A*" => -0.005708, "A." => 0.002356, "A/" => 0.001540, "A@" => -0.001359, "AA" => 0.002990, "AC" => -0.001721, "AG" => -0.001721, "AJ" => 0.002627, "AO" => -0.001721, "AQ" => -0.001721, "AS" => 0.001450, "AT" => -0.005798, "AU" => -0.000906, "AV" => -0.005617, "AW" => -0.001631, "AX" => 0.002265, "AY" => -0.007157, "AZ" => 0.001721, "A]" => -0.002446, "Ac" => -0.001178, "Ad" => -0.001178, "Ae" => -0.001178, "Ag" => -0.001450, "Ao" => -0.001178, "Aq" => -0.001178, "As" => 0.001178, "Au" => -0.001359, "Av" => -0.001903, "Aw" => -0.001721, "Ax" => 0.002356, "Ay" => -0.001359, "Az" => 0.001359, "A{" => -0.001812, "A}" => -0.000906, "B'" => -0.000997, "B(" => -0.000997, "B)" => -0.002265, "B*" => -0.000997, "B." => -0.000906, "B/" => -0.001903, "B:" => -0.000997, "B?" => -0.001812, "BV" => -0.001721, "BW" => -0.001178, "BX" => -0.001903, "BY" => -0.002265, "B]" => -0.003080, "Bz" => -0.001178, "B}" => -0.001993, "C(" => -0.002084, "C-" => -0.002718, "C." => 0.001993, "C?" => 0.001359, "C@" => -0.001540, "CA" => 0.001993, "CC" => -0.001812, "CG" => -0.001812, "CJ" => 0.002084, "CO" => -0.001812, "CQ" => -0.001812, "CS" => 0.000906, "CT" => 0.001540, "CV" => 0.001540, "CX" => 0.001178, "CY" => 0.001540, "CZ" => 0.000906, "C[" => -0.000906, "Cc" => -0.001359, "Cd" => -0.001359, "Ce" => -0.001359, "Cg" => -0.001359, "Co" => -0.001359, "Cq" => -0.001359, "Cu" => -0.001812, "Cv" => -0.001450, "Cw" => -0.001540, "Cx" => 0.001268, "Cy" => -0.001450, "C{" => -0.002537, "D!" => -0.001268, "D'" => -0.002356, "D(" => -0.001087, "D)" => -0.002990, "D." => -0.002990, "D/" => -0.003896, "D?" => -0.003533, "D@" => -0.000997, "DA" => -0.001721, "DJ" => -0.002265, "DS" => -0.000997, "DT" => -0.002446, "DV" => -0.001540, "DW" => -0.001540, "DX" => -0.002174, "DY" => -0.003715, "DZ" => -0.001359, "D[" => -0.000997, "D]" => -0.003805, "Da" => -0.001268, "D}" => -0.002627, "E'" => -0.001450, "E(" => -0.001903, "E*" => -0.001178, "E." => 0.000997, "E@" => -0.001450, "EA" => 0.001540, "EC" => -0.002537, "EG" => -0.002537, "EJ" => 0.001540, "EO" => -0.002537, "EQ" => -0.002537, "EU" => -0.001993, "E[" => -0.001540, "E]" => -0.003896, "Ec" => -0.001450, "Ed" => -0.001540, "Ee" => -0.001450, "Eg" => -0.002084, "Eo" => -0.001540, "Eq" => -0.001359, "Et" => -0.001268, "Eu" => -0.001721, "Ev" => -0.002265, "Ew" => -0.002265, "Ex" => 0.000815, "Ey" => -0.002265, "E{" => -0.001721, "E}" => -0.001993, "F!" => -0.000906, "F(" => -0.002174, "F." => -0.005889, "F/" => -0.005436, "F:" => -0.001631, "F?" => 0.001178, "F@" => -0.001631, "FA" => -0.004168, "FC" => -0.001178, "FG" => -0.001178, "FJ" => -0.007248, "FO" => -0.001178, "FQ" => -0.001178, "FT" => 0.001268, "FV" => 0.001631, "FY" => 0.001812, "F[" => -0.001359, "F]" => -0.003715, "Fa" => -0.004621, "Fc" => -0.001268, "Fd" => -0.001268, "Fe" => -0.001268, "Fg" => -0.001268, "Fn" => -0.002537, "Fo" => -0.001268, "Fp" => -0.002537, "Fq" => -0.001268, "Fr" => -0.002537, "Fu" => -0.002265, "Fx" => -0.003262, "Fz" => -0.002356, "G)" => -0.000906, "G*" => -0.002265, "G]" => -0.000906, "Gv" => -0.001631, "Gy" => -0.001631, "G}" => -0.000906, "J)" => -0.000906, "J." => -0.000906, "J/" => -0.003262, "JA" => -0.000906, "JJ" => -0.001359, "JZ" => -0.001540, "J]" => -0.003080, "Jz" => -0.001631, "J}" => -0.001721, "K(" => -0.001631, "K*" => -0.002990, "K-" => -0.004258, "K." => 0.001450, "K/" => 0.001631, "K?" => 0.000997, "K@" => -0.001721, "KA" => 0.003080, "KC" => -0.003171, "KG" => -0.003171, "KJ" => 0.002446, "KO" => -0.003171, "KQ" => -0.003171, "KT" => 0.001540, "KV" => 0.001812, "KW" => 0.000906, "KX" => 0.002356, "KY" => 0.001993, "KZ" => 0.001903, "K]" => -0.002356, "Kc" => -0.001903, "Kd" => -0.001903, "Ke" => -0.001903, "Kg" => -0.001903, "Ko" => -0.001903, "Kq" => -0.001903, "Ks" => 0.001268, "Ku" => -0.001178, "Kv" => -0.001268, "Kw" => -0.004349, "Kx" => 0.002446, "Ky" => -0.000906, "Kz" => 0.001450, "K{" => -0.001721, "L'" => -0.011416, "L(" => -0.000906, "L*" => -0.012593, "L-" => -0.006251, "L." => 0.002084, "L/" => 0.001087, "LA" => 0.002537, "LC" => -0.004077, "LG" => -0.004077, "LJ" => 0.002537, "LO" => -0.004077, "LQ" => -0.004077, "LS" => 0.001268, "LT" => -0.010419, "LU" => -0.001631, "LV" => -0.009060, "LW" => -0.004077, "LX" => 0.001812, "LY" => -0.010419, "LZ" => 0.001268, "L]" => -0.002899, "Lc" => -0.001087, "Ld" => -0.001087, "Le" => -0.001087, "Lg" => -0.001087, "Lo" => -0.001087, "Lq" => -0.001087, "Lv" => -0.003624, "Lw" => -0.003352, "Lx" => 0.001903, "Ly" => -0.001812, "Lz" => 0.000906, "L{" => -0.002174, "L}" => -0.001359, "MV" => -0.000544, "MY" => -0.000725, "O!" => -0.001268, "O'" => -0.002084, "O(" => -0.001087, "O)" => -0.002537, "O." => -0.002990, "O/" => -0.003805, "O?" => -0.003080, "O@" => -0.000997, "OA" => -0.001721, "OJ" => -0.002265, "OS" => -0.000906, "OT" => -0.002446, "OV" => -0.001540, "OW" => -0.001450, "OX" => -0.002174, "OY" => -0.003715, "OZ" => -0.001359, "O[" => -0.000906, "O]" => -0.003805, "Oa" => -0.001178, "O}" => -0.002627, "P!" => -0.000997, "P(" => -0.001087, "P)" => -0.002174, "P." => -0.008154, "P/" => -0.005617, "PA" => -0.004530, "PJ" => -0.008607, "PX" => -0.001631, "P[" => -0.001359, "P]" => -0.003715, "Pa" => -0.001721, "Pc" => -0.001903, "Pd" => -0.001903, "Pe" => -0.002899, "Pg" => -0.001903, "Po" => -0.001903, "Pq" => -0.000997, "Pv" => 0.000906, "Pw" => 0.000815, "Py" => 0.000906, "P}" => -0.002174, "Q!" => -0.001268, "Q'" => -0.002084, "Q(" => -0.001087, "Q." => -0.002990, "Q?" => -0.003080, "Q@" => -0.000997, "QA" => -0.001721, "QJ" => -0.002265, "QS" => -0.000906, "QT" => -0.002446, "QV" => -0.001540, "QW" => -0.001450, "QX" => -0.002174, "QY" => -0.003715, "QZ" => -0.001359, "Q[" => -0.000906, "Qa" => -0.001268, "Qj" => 0.001359, "R(" => -0.001087, "R." => 0.001268, "R/" => 0.001087, "R?" => -0.001178, "R@" => -0.001359, "RA" => 0.002537, "RC" => -0.000997, "RG" => -0.000997, "RJ" => 0.001993, "RO" => -0.000997, "RQ" => -0.000997, "RV" => -0.000906, "RX" => 0.001721, "RY" => -0.001721, "RZ" => 0.001268, "R]" => -0.002990, "Rx" => 0.001903, "Rz" => 0.000815, "R{" => -0.001540, "R}" => -0.001450, "T(" => -0.002446, "T)" => 0.001087, "T-" => -0.004439, "T." => -0.006795, "T/" => -0.007792, "T:" => -0.007610, "T?" => 0.001993, "T@" => -0.004621, "TA" => -0.005798, "TC" => -0.002446, "TG" => -0.002446, "TJ" => -0.008154, "TO" => -0.002446, "TQ" => -0.002446, "TT" => 0.002174, "TV" => 0.002446, "TW" => 0.001540, "TX" => 0.001359, "TY" => 0.002627, "T]" => -0.002899, "Ta" => -0.004077, "Tc" => -0.004983, "Td" => -0.004983, "Te" => -0.004983, "Tg" => -0.004983, "Tn" => -0.003624, "To" => -0.004983, "Tp" => -0.003624, "Tq" => -0.004983, "Tr" => -0.003624, "Ts" => -0.004077, "Tu" => -0.003080, "Tv" => -0.001993, "Tw" => -0.007339, "Tx" => -0.001631, "Ty" => -0.001993, "Tz" => -0.002718, "T{" => -0.002174, "U(" => -0.000906, "U." => -0.000906, "U/" => -0.003715, "U:" => -0.000906, "UA" => -0.000906, "UJ" => -0.001359, "UZ" => -0.001450, "U]" => -0.003352, "Ua" => -0.001450, "Uz" => -0.001631, "U{" => -0.000906, "U}" => -0.001993, "V'" => 0.001268, "V(" => -0.002990, "V)" => 0.001450, "V-" => -0.000906, "V." => -0.006795, "V/" => -0.006070, "V:" => -0.001812, "V?" => 0.002174, "V@" => -0.003443, "VA" => -0.005617, "VC" => -0.001540, "VG" => -0.001540, "VJ" => -0.008607, "VM" => -0.000544, "VO" => -0.001540, "VQ" => -0.001540, "VT" => 0.002537, "VV" => 0.002809, "VW" => 0.001903, "VX" => 0.001721, "VY" => 0.002990, "V]" => -0.002537, "Va" => -0.002265, "Vc" => -0.004077, "Vd" => -0.004077, "Ve" => -0.004077, "Vg" => -0.004077, "Vn" => -0.002718, "Vo" => -0.004077, "Vp" => -0.002718, "Vq" => -0.004077, "Vr" => -0.002718, "Vs" => -0.001359, "Vu" => -0.002174, "Vz" => -0.000181, "V{" => -0.002174, "W'" => 0.001178, "W(" => -0.001450, "W." => -0.003352, "W/" => -0.004258, "W:" => -0.000997, "W?" => 0.001450, "W@" => -0.001721, "WA" => -0.001631, "WC" => -0.001450, "WG" => -0.001450, "WJ" => -0.005436, "WO" => -0.001450, "WQ" => -0.001450, "WT" => 0.001721, "WV" => 0.001993, "WW" => 0.001087, "WX" => 0.000906, "WY" => 0.002174, "W]" => -0.003352, "Wa" => -0.002627, "Wc" => -0.001993, "Wd" => -0.001993, "We" => -0.001993, "Wg" => -0.002356, "Wn" => -0.001903, "Wo" => -0.001993, "Wp" => -0.001903, "Wq" => -0.001993, "Wr" => -0.001903, "Ws" => -0.001540, "Wu" => -0.001721, "W{" => -0.001540, "X(" => -0.002265, "X*" => -0.002356, "X-" => -0.002537, "X." => 0.001178, "X/" => 0.000906, "X@" => -0.002356, "XA" => 0.002446, "XC" => -0.002174, "XG" => -0.002174, "XJ" => 0.001812, "XO" => -0.002174, "XQ" => -0.002174, "XT" => 0.001178, "XV" => 0.001540, "XX" => 0.001631, "XY" => 0.001721, "XZ" => 0.001178, "X]" => -0.003080, "Xc" => -0.001631, "Xd" => -0.001631, "Xe" => -0.001631, "Xg" => -0.001631, "Xo" => -0.001631, "Xq" => -0.001631, "Xu" => -0.000906, "Xv" => -0.000997, "Xw" => -0.003352, "Xx" => 0.001721, "Xy" => -0.000634, "X{" => -0.002356, "Y(" => -0.003805, "Y)" => 0.001631, "Y-" => -0.004439, "Y." => -0.005889, "Y/" => -0.007429, "Y:" => -0.003443, "Y?" => 0.002265, "Y@" => -0.005255, "YA" => -0.007157, "YC" => -0.003715, "YG" => -0.003715, "YJ" => -0.010419, "YM" => -0.000725, "YO" => -0.003715, "YQ" => -0.003715, "YT" => 0.002718, "YV" => 0.002990, "YW" => 0.002084, "YX" => 0.001903, "YY" => 0.003171, "YZ" => 0.000997, "Y]" => -0.002356, "Ya" => -0.003715, "Yc" => -0.004439, "Yd" => -0.004439, "Ye" => -0.004439, "Yg" => -0.004439, "Yn" => -0.003624, "Yo" => -0.004439, "Yp" => -0.003624, "Yq" => -0.004439, "Yr" => -0.003624, "Ys" => -0.001812, "Yu" => -0.003080, "Yx" => -0.001359, "Yz" => -0.002537, "Y{" => -0.001993, "Z(" => -0.001903, "Z-" => -0.005436, "Z." => 0.000997, "Z@" => -0.001450, "ZA" => 0.001540, "ZC" => -0.003262, "ZG" => -0.003262, "ZJ" => 0.001540, "ZO" => -0.003262, "ZQ" => -0.003262, "ZU" => -0.001268, "ZV" => 0.000906, "ZY" => 0.001087, "Z[" => -0.001540, "Z]" => -0.003896, "Zc" => -0.001450, "Zd" => -0.001540, "Ze" => -0.001450, "Zg" => -0.002084, "Zo" => -0.001540, "Zq" => -0.001359, "Zt" => -0.001178, "Zu" => -0.001721, "Zv" => -0.002084, "Zw" => -0.002174, "Zx" => 0.000815, "Zy" => -0.002084, "Z{" => -0.003171, "Z}" => -0.001359, "[A" => -0.002537, "[C" => -0.003896, "[G" => -0.003896, "[J" => -0.002537, "[O" => -0.003896, "[Q" => -0.003896, "[S" => -0.002356, "[T" => -0.002990, "[U" => -0.003443, "[V" => -0.002627, "[W" => -0.003352, "[X" => -0.003262, "[Y" => -0.002446, "[Z" => -0.003715, "[]" => 0.007248, "]C" => -0.000906, "]G" => -0.000906, "]O" => -0.000906, "]Q" => -0.000906, "]W" => -0.000906, "]X" => -0.000906, "]Z" => -0.001450, "a'" => -0.002446, "a)" => -0.002174, "a*" => -0.001812, "a?" => -0.002537, "a]" => -0.002718, "av" => -0.001359, "aw" => -0.001087, "ay" => -0.001359, "a}" => -0.001903, "b'" => -0.003352, "b)" => -0.002446, "b/" => -0.001993, "b?" => -0.002537, "b]" => -0.002718, "bv" => -0.001178, "bw" => -0.001087, "bx" => -0.001540, "by" => -0.001178, "bz" => -0.001812, "b}" => -0.001903, "c-" => -0.002899, "c." => 0.000906, "c]" => -0.002446, "cd" => -0.001087, "cg" => -0.001450, "co" => -0.001178, "cv" => 0.000997, "cw" => 0.000906, "cx" => 0.001450, "cy" => 0.000997, "c{" => -0.001903, "f)" => 0.003533, "f*" => 0.000997, "f-" => -0.003171, "f." => -0.004711, "f/" => -0.003805, "f?" => 0.002174, "f]" => 0.003533, "fv" => 0.001721, "fw" => 0.001631, "fx" => 0.001359, "fy" => 0.001721, "f}" => 0.003533, "h'" => -0.003352, "h)" => -0.002174, "h*" => -0.001903, "h?" => -0.002446, "h]" => -0.002627, "hv" => -0.001359, "hw" => -0.001178, "hy" => -0.001540, "h}" => -0.001903, "jj" => 0.000815, "k-" => -0.002446, "k/" => 0.000997, "k@" => -0.001812, "k]" => -0.002265, "kc" => -0.002356, "kd" => -0.002356, "ke" => -0.002356, "kg" => -0.002627, "ko" => -0.002627, "kq" => -0.002356, "kx" => 0.001721, "k{" => -0.001721, "n'" => -0.002809, "n)" => -0.002265, "n*" => -0.001993, "n?" => -0.002537, "n]" => -0.002718, "nv" => -0.001450, "nw" => -0.001268, "ny" => -0.001631, "n}" => -0.001903, "o'" => -0.002899, "o)" => -0.002446, "o*" => -0.001812, "o/" => -0.002084, "o?" => -0.002718, "o]" => -0.002718, "ov" => -0.001268, "ow" => -0.001178, "ox" => -0.001540, "oy" => -0.001268, "oz" => -0.001812, "o}" => -0.001903, "p'" => -0.002899, "p)" => -0.002446, "p*" => -0.001812, "p/" => -0.001993, "p?" => -0.002537, "p]" => -0.002718, "pv" => -0.001268, "pw" => -0.001087, "px" => -0.001540, "py" => -0.001268, "pz" => -0.001631, "p}" => -0.001903, "qj" => 0.002718, "r*" => 0.001087, "r-" => -0.002899, "r." => -0.004983, "r/" => -0.004168, "r?" => -0.003896, "r]" => -0.002174, "rq" => -0.001087, "rv" => 0.001903, "rw" => 0.001721, "rx" => 0.001450, "ry" => 0.001903, "t-" => -0.003533, "t." => 0.000997, "t]" => -0.002446, "tc" => -0.001178, "td" => -0.001268, "te" => -0.000906, "tg" => -0.000906, "to" => -0.001268, "tq" => -0.001087, "tx" => 0.001540, "t{" => -0.001903, "v*" => 0.000815, "v." => -0.003171, "v/" => -0.002899, "v?" => -0.003533, "v]" => -0.002356, "vc" => -0.001359, "vd" => -0.001268, "ve" => -0.001268, "vg" => -0.001178, "vo" => -0.001268, "vq" => -0.001268, "vv" => 0.001631, "vw" => 0.001540, "vx" => 0.001268, "vy" => 0.001631, "w*" => 0.000815, "w." => -0.002899, "w/" => -0.002537, "w?" => -0.003171, "w]" => -0.002356, "wc" => -0.001178, "wo" => -0.001087, "wv" => 0.001631, "ww" => 0.001540, "wx" => 0.001268, "wy" => 0.001631, "x]" => -0.002446, "xc" => -0.001903, "xd" => -0.001903, "xe" => -0.001903, "xg" => -0.001903, "xo" => -0.001903, "xq" => -0.001903, "xx" => 0.001540, "x{" => -0.001903, "z]" => -0.003080, "zc" => -0.001721, "zd" => -0.001812, "ze" => -0.001721, "zf" => -0.001087, "zg" => -0.001993, "zo" => -0.001812, "zq" => -0.001631, "zt" => -0.001178, "zu" => -0.001178, "z{" => -0.002537, "z}" => -0.001903, "{A" => -0.001087, "{C" => -0.002356, "{G" => -0.002718, "{J" => -0.001087, "{O" => -0.002718, "{Q" => -0.002718, "{S" => -0.001903, "{U" => -0.002084, "{Z" => -0.001631, "{}" => 0.007248, "}A" => -0.001903, "}J" => -0.001903, "}S" => -0.001631, "}T" => -0.002265, "}U" => -0.000997, "}V" => -0.002265, "}W" => -0.001721, "}X" => -0.002627, "}Y" => -0.002174, "}Z" => -0.003080] }]]></e></m></meta>
		</ubuntuData>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="xGLfonts.structs.CharCoordinates" params="" file="src/xGLfonts/structs/CharCoordinates.hx">
		<vertices public="1"><c path="Array"><x path="Float"/></c></vertices>
		<pos public="1"><c path="Array"><x path="Float"/></c></pos>
		<new public="1" set="method" line="6"><f a="vertices:pos">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<typedef path="xGLfonts.structs.FontDef" params="" file="src/xGLfonts/structs/FontData.hx" module="xGLfonts.structs.FontData"><a><font><c path="xGLfonts.structs.FontData"/></font></a></typedef>
	<class path="xGLfonts.structs.FontMetric" params="" file="src/xGLfonts/structs/FontMetric.hx">
		<capScale public="1"><x path="Float"/></capScale>
		<lowScale public="1"><x path="Float"/></lowScale>
		<pixelSize public="1"><x path="Float"/></pixelSize>
		<ascent public="1"><x path="Int"/></ascent>
		<lineHeight public="1"><x path="Int"/></lineHeight>
		<new public="1" set="method" line="14"><f a="capScale:lowScale:pixelSize:ascent:lineHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="xGLfonts.structs.WriteStrResult" params="" file="src/xGLfonts/structs/WriteStrResult.hx">
		<rect public="1"><c path="Array"><x path="Float"/></c></rect>
		<stringPos public="1"><x path="Int"/></stringPos>
		<arrayPos public="1"><x path="Int"/></arrayPos>
		<new public="1" set="method" line="10"><f a="rect:stringPos:arrayPos">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
</haxe>